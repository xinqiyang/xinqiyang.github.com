{"meta":{"title":"xinqiyang notes","subtitle":"Nothing behind me, everything ahead of me,as is ever so on the road.","description":"xinqiyang's notes","author":"xinqiyang","url":"http://yangxinqi.com"},"pages":[{"title":"categories","date":"2018-02-05T11:53:46.000Z","updated":"2018-02-05T12:54:08.000Z","comments":false,"path":"categories/index.html","permalink":"http://yangxinqi.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2018-02-03T15:11:02.000Z","updated":"2020-05-26T18:52:36.977Z","comments":true,"path":"about/index.html","permalink":"http://yangxinqi.com/about/index.html","excerpt":"","text":"关于xinqiyang一个Geek，喜爱编程联系： xinqiyang@gmail.com简历： xinqiyang’s resume"},{"title":"tags","date":"2018-02-05T11:54:42.000Z","updated":"2018-02-05T12:55:02.000Z","comments":false,"path":"tags/index.html","permalink":"http://yangxinqi.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Oracle协议比较分析-Band vs Chainlink","slug":"Oracle协议比较分析-Band-vs-Chainlink","date":"2020-10-20T02:26:02.000Z","updated":"2020-10-20T04:52:57.542Z","comments":true,"path":"2020/10/20/Oracle协议比较分析-Band-vs-Chainlink/","link":"","permalink":"http://yangxinqi.com/2020/10/20/Oracle协议比较分析-Band-vs-Chainlink/","excerpt":"前言最近项目中需要使用到Oracle,对价格进行更新，找了一圈市面上的，发现Band和Chainlink，对Chainlink的比价深有体会，遂开始深入研究下Oracle的实现机制，以及如何讲现实世界中的数据和API链接到智能合约中。 以下主要是翻译了SmartContent写的Band协议和Chainlink的对比分析的文章， 原文地址： https://medium.com/@smartcontentpublication/a-comparative-analysis-of-band-protocol-and-chainlink-54b7d14823b5 ，对文章进行了翻译和补充，基本使用Google翻译进行简要的翻译，可以当成一篇PR稿文章，主要从几个维度，比如 数据质量，随机性以来，采纳指标，资源效率和网络设计，团队，去中心化和多链支持等各个方面，对Band和Chainlink进行了比较，结果都是Chainlink胜出了。大杨个人意见，看过Band的创始团队和背后的投资机构，都是相当有前景，而且Oracle语言机的盈利模式上都是平台方来撮合数据需求方和提供方调用，然后支付方式都是用平台的虚拟币支付，这样的方式其实也带来了很大不确定性，随着平台方币价的上涨，也带来了需求方很大的调用成本，本身现在公开的调用方式，实时性也不好，如果采用较为实时的解决方案，那么使用LINK代币来支付的费用，换算成法币的话，也是非常高的。从文章从可以看到的是Band协议V2，依赖于与Cosmos, 而且很区块链化，对于用户的直接引入也很不友好，此外Chainlink VRF作为一个显著的重大热点，为NFT提供服务，Band目前还没有什么亮点仅仅挂个Oracle的竞争者。整体来看，Band还是比较困难的，推荐大家使用Chainlink.","text":"前言最近项目中需要使用到Oracle,对价格进行更新，找了一圈市面上的，发现Band和Chainlink，对Chainlink的比价深有体会，遂开始深入研究下Oracle的实现机制，以及如何讲现实世界中的数据和API链接到智能合约中。 以下主要是翻译了SmartContent写的Band协议和Chainlink的对比分析的文章， 原文地址： https://medium.com/@smartcontentpublication/a-comparative-analysis-of-band-protocol-and-chainlink-54b7d14823b5 ，对文章进行了翻译和补充，基本使用Google翻译进行简要的翻译，可以当成一篇PR稿文章，主要从几个维度，比如 数据质量，随机性以来，采纳指标，资源效率和网络设计，团队，去中心化和多链支持等各个方面，对Band和Chainlink进行了比较，结果都是Chainlink胜出了。大杨个人意见，看过Band的创始团队和背后的投资机构，都是相当有前景，而且Oracle语言机的盈利模式上都是平台方来撮合数据需求方和提供方调用，然后支付方式都是用平台的虚拟币支付，这样的方式其实也带来了很大不确定性，随着平台方币价的上涨，也带来了需求方很大的调用成本，本身现在公开的调用方式，实时性也不好，如果采用较为实时的解决方案，那么使用LINK代币来支付的费用，换算成法币的话，也是非常高的。从文章从可以看到的是Band协议V2，依赖于与Cosmos, 而且很区块链化，对于用户的直接引入也很不友好，此外Chainlink VRF作为一个显著的重大热点，为NFT提供服务，Band目前还没有什么亮点仅仅挂个Oracle的竞争者。整体来看，Band还是比较困难的，推荐大家使用Chainlink.正文Band Protocol是一个Oracle平台，旨在将现实世界的数据和API聚合并连接到智能合约。 Band v1最初于2019年9月在Ethereum上使用了Bonding Curve设计，但开发人员的兴趣不大，最终没有在主网上获得采用。 核心开发团队在不到一年的时间内就放弃了它, 开始开发V2版本。Band v2，被称为BandChain，是一个在自己的基于Tendermint的区块链上运行的Oracle网络（使用Cosmos SDK）。 BandChain已经启动了两个网络，第一个是Wenchang网络-一个原型主网络，它不具有任何Oracle功能，只生成基本上是空的块。第二个网络是Guan Ya测试网，但是，在底层Cosmos SDK中出现严重的内存泄漏和状态修剪错误之后，该网络最近不得不重新启动。在正式主网之前，其目的是启动一个授权证明网络，该网络由七个属于Band基金会和私有选择验证者节点组成。在本文中，我们将首先从高层次探讨BandChain的工作方式，从而为进行比较分析奠定基础，该分析详细说明了BandChain与Chainlink的堆叠方式。比较的主要重点如下：数据质量Band：在发布时，BandChain最初将仅支持免费的低质量API，而付费的受密码保护的API支持在很大程度上仍是理论上的。 因此，开发人员不能只调用他们想要的任何受密码保护的API。 他们提出的计划是要求数据提供者更改其整个业务模型，以接受数据的链上加密货币支付。Chainlink：本机支持连接到当今任何实时生产环境中的数据源API，包括免费的开放API，付费的经过身份验证的API和专有的私有API。 所有这些都可以通过模块化的外部适配器实现，任何人都可以创建和托管这些适配器，而无需Chainlink团队或数据提供商本身的任何其他支持。随机性依赖Band：将随机性作为协议的核心组成部分； 这是选择oracle节点的必需方法，尽管该功能不受任何原始学术研究的支持。 这不仅严重限制了数据的可访问性（每个节点都必须有权访问相同的数据）和网络安全性（必须信任每个节点），而且该团队在此主题上无能为力，因为他们在尝试复制Chainlink VRF在他们自己的github repo上的时候，被发现了(https://twitter.com/chainlink_alert/status/1267133567764758533)。Chainlink：不将随机性作为协议的核心部分，以确保用户具有高度的灵活性和质量控制机制，可以选择节点并连接到数据。 他们建立了Chainlink可验证随机性功能（VRF），作为一种新颖的方法，以领先的和原创的学术研究为后盾，为区块链游戏和NFT dApp创建可证明的公平的随机性源。采纳指标Band：尽管Band v1在以太坊上存在了将近一年，但主网上目前没有正在使用的产品。 Band v2尚未完成（没有oracle功能），完全未经验证，并且缺少能够支持生产中的真实用户的任何案例研究。Chainlink：目前，通过其众多实时价格参考供稿，对于排名靠前的DeFi项目，其在Mainnet上的价值超过$ 10B。 由于其在VRF方面的开创性工作，它是整个DeFi，跨区块链，游戏中使用最广泛的Oracle，并拥有240多个项目集成管道。资源效率与网络设计Band：他们的Oracle建立在自己的区块链上，需要Oracle节点执行作为BandChain的块生产者/验证者的辅助工作，这对Oracle的数据交付工作没有任何价值。 这样，由于状态膨胀越来越大，并且随着时间的推移，同步时间较长，因此节点将承受较高的运营成本。Chainlink：Chainlink不是，以后也不会是一个区块链网络，因此节点仅充当仅专注于数据交付的预言家，而不会阻止生产/验证。 节点非常轻巧，不需要状态处理或同步，因此可以将节点旋转并立即使用。团队Band：Band团队规模很小，没有进行过任何原始的学术研究，也缺乏构建分布式系统和Oracle的经验，尤其是那些能够确保真实价值的产品。 他们还放弃了原始设计，并多次更改了协议。Chainlink：40+ Chainlink团队成员自2014年以来一直在建立Oracle预言机并发表原创学术研究，并得到了顶级顾问的支持，例如Ari Juels（RSA的前首席科学家），Tom Gonser（DocuSign的创始人），Evan Cheng（工程总监） 在Facebook）等等。 他们坚持原始设计并对其进行扩展以改善用户体验。去中心化Brand：所有数据查询/响应必须通过单个区块链BandChain处理，从而限制了最大吞吐量。 由于Tendermint BFT共识的可扩展性有限，因此上限为100个节点。Chainlink：无限数量的Oracle网络可以并行运行，并且可以在任何区块链，DLT或Layer 2解决方案上本地运行，从而无需通过任何一条链来进行数据查询/响应。 即将到来的阈值签名和链外聚合升级的节点没有上限。多链支持Brand：依靠尚未发布的Cosmos IBC将数据本地桥接到其他区块链。 因此，它目前仅支持精简客户端，精简客户端要求数据由协议之外的未知第三方交付，这些第三方对其性能的奖励或处罚为零。Chainlink：通过模块化的外部适配器，外部发起程序，核心合约部署和令牌桥接，以本地方式支持任意区块链。 节点将数据直接传递到任何区块链上的请求合约，从而最大程度地减少网络跳转并确保及时传递。怎么运行的Band Protocol v2（BandChain）是基于Bender（DPoS）共识算法的基于Tendermint的区块链，并在Cosmos生态系统中运行。 BandChain当前在主网上不支持oracle，仅产生大部分为空的块。本节介绍了BandChain一旦完全发挥作用后将如何运行，但请记住，主网中尚不存在许多这些功能。BandChain节点必须既充当区块链的验证器（产生块，验证和订购交易），又充当服务外部数据请求的预言家。拥有最多代币的前100名验证者成为BandChain的验证者。该网络的年通胀率将从13.5％开始，目标是占总供应量的66％。如果抵押率低于66％，通货膨胀率最高将上升到20％。如果抵押率高于66％，通货膨胀率将至少降低7％。另外，虽然尚不清楚这些资金将如何分配以及分配给谁，但每个区块奖励的2%会转入社区资金池。可以大幅度削减验证者的本金，以使停机时间过多，超过30,000个区块（0.01％罚款），双重签名区块（5％罚款）或无响应（百分比不清楚）。如果大幅减少停机时间，节点将无法参与对任何块的签名，直到它们在BandChain上发送交易证明其在线。重要的是要注意，BAND赌注和所有这些削减条件仅用于维护区块链验证和区块生产，而不是用于确保任何oracle服务的可靠性或数据准确性。尽管Band团队建议在将来共同投票以惩罚执行错误的Oracle服务的验证者（这将受到鲸鱼的操纵），但这尚待开发，并且仍然完全是理论上的。用户可以通过调用可用的“ Oracle Script”智能合约将数据请求发送到BandChain，这些智能合约是对数据请求详细信息进行编码的链上可执行程序，例如要调用的数据源API以及将验证程序响应聚合为单个响应的方法。选择响应数据请求的节点由随机权益加权算法决定。验证者投入的BAND令牌越多，将它们分配给数据请求的可能性就越大。因此，数据请求者无法控制将使用哪些节点来完成其数据查询。选定的验证器通过获取链下数据并在链上（到BandChain）传递响应来完成数据请求。然后，将来自每个参与节点的数据汇总以形成最终响应。创建了一个oracle数据证明（Merkle证明），并显示最终结果的存在以及oracle脚本哈希，输入参数，执行时间等。该证明可以发送到其他区块链上的智能合约以验证其证明由BandChain验证者。证明也可以被解码，以便智能合约可以使用数据结果。Band Protocol的目标是与区块链无关，其中Oracle请求在BandChain的环境中处理并桥接到其他链上。他们计划利用Cosmos正在开发的未发布的跨区块链通信（IBC）协议来将数据桥接到其他链，尽管目前尚不清楚IBC是否以及何时准备投入生产。因此，要求用户使用lite客户端协议将数据手动桥接到其他区块链，直到IBC启动。这要求用户依赖BandChain协议之外的外部第三方将数据实际传递到另一个区块链（例如，以太坊上的DeFi应用程序）上正在使用的智能合约中。这些第三方没有动力可靠地提供数据，也没有因此而受到惩罚。现在您对BandChain的工作方式有了一些了解，我们可以逐点深入进行比较，以了解Band如何与Chainlink抗衡。数据质量和Oracle连接范围Band ProtocolBand协议仅支持免费的开放API。目前，他们对付费的受密码保护的API的支持完全是理论上的。当前的提议将要求数据提供商单独上岗，并修改其业务模型以加密货币支付。 Chainlink原生支持当今的所有数据源，包括通过模块化外部适配器的开放式和经过身份验证的API，这些适配器不需要数据提供商更改其现有业务模型。编写本文时，Oracle功能在主网上尚不可用，但一旦上线，它将仅支持免费的低质量API，这些API通常每隔10分钟或更长时间更新一次，精度不超过小数点后1位点。从一开始就无法支持高质量数据，这使人们严重怀疑DeFi协议是否会感到满意，依靠Band来保护数百万美元的用户存款，尤其是当几乎所有高质量数据都存在于付费专区且仅发生一次Oracle攻击时由于数据质量低劣，最终可能导致破产并破坏应用程序的整体声誉。Band表示BandChain将无法支持经过身份验证（受密码保护）的API，直到第2阶段（时间表尚不清楚）。密码保护的API如何实施的细节几乎不存在，在他们的文档中减去一句话，即” API提供者通过BandChain的链上支付结算来通过数据获利”。尽管这种模型不太可能已经准备好投入生产，但从整体上考虑它会暴露出逻辑上的一些缺陷。首先，数据提供者将需要改变其现有业务模型以支持加密货币支付，这意味着Band将不得不携带成百上千的特定于应用程序的，经过身份验证的利基数据源，数据请求者需要这些数据源来构建其dApp。这既不切实际又不可扩展，将严重限制开发人员访问绝大多数数据源。其次，它们的随机权益加权节点选择机制意味着可以潜在地选择网络中的每个节点来服务数据请求，这导致每个节点都需要访问每个潜在的数据源。这将需要与数据提供商进行激烈的协商，以达成整个区块链都可以访问的交易，以及节点之间缓慢，复杂的链外协调/治理，以共同添加新数据源并为其提供资金，这使其非常不切实际或完全不可行。扩展性上，由于采用了这种设计选择，Band仅是所有节点都可以平等访问的唯一数据类型，因此它仅非常适合支持开放的API。这将阻止开发人员访问他们所需的特定外部数据，尤其是以任何快速无摩擦的方式。这也将消除绝大多数数据提供商永远无法加入网络，因为他们不能（出于法律原因）和/或不希望（出于商业原因）接受加密货币支付。鉴于缺乏利用BandChain生产的应用程序，任何数据提供商花费时间，资源和金钱来重新设计其业务模型以支持BandChain几乎没有意义。他们也从未详细说明过如何保护数据隐私的功能，这将进一步使BandChain不再受到希望保护其IP的数据提供商和需要保护敏感信息的企业的支持。ChainlinkChainlink已经通过其价格参考合约利用了凭据数据源，这些参考数据是由分散的oracle网络保护的30多种DeFi价格摘要的集合，这些摘要使任何智能合约都可以在单个交易中同步提取外部数据。Chainlink可以灵活地提供高质量的数据，因为节点始终具有内置的凭据管理功能，这些功能使它们可以使用模块化外部适配器访问任何受密码保护的API。可以使用任何编程语言编写Chainlink外部适配器，并与Chainlink节点本身分开托管。这打开了API的整个世界，例如高级数据提供商，Web API，企业系统，云提供商，IoT设备，支付系统，其他区块链（公共和私有）等等。数据提供商无需更改其核心业务模型或后端基础结构即可通过智能合约访问，因为Chainlink节点可以处理外部适配器中的API密码密钥。因此，他们可以为今天使用的法定订阅模型中的已认证API付费，然后只需将其API密码密钥放在外部适配器中，然后立即开始在链上传递该数据。数据提供商更喜欢这种模型，尤其是在最初，因为它们可以在不花费任何时间，资源或金钱进行复杂区块链集成的情况下获得更多收入。这极大地减少了开发人员的负担，因为节点可以在无需任何许可或需要所有其他节点获得相同访问权限的情况下，快速构建对任何链外数据资源的支持。它只需要一个节点或开发人员为该数据源API编写一个外部适配器，使其可用于任何区块链。然后，节点可以通过专门提供特定的数据集来区分自己。同样，如果数据提供者希望直接在链上获得报酬，则他们可以自己运行节点并直接向市场出售。实际上，一些数据提供者已经在Chainlink上这样做了，例如Huobi，Kaiko，Alpha Vantage等。重要的是，外部适配器模型可确保数据提供商始终获得报酬，而企业系统仅授权经过验证的用户。Chainlink还高度了解Oracle隐私的必要性，因此他们在可信赖的硬件解决方案（如Town Crier）上的完善工作已得到广泛认可。企业可以使用该技术来满足隐私法规，同时在执行智能合约时仍使用其专有数据。最重要的是，企业可以准确选择哪些oracle节点满足其数据问题，这在确保机密数据（PII）即使经过加密的情况下也仅位于特定地理区域内以确保遵守诸如GDPR –许多全球企业和机构的基本要求。Chainlink网络是一种资本主义的自由市场经济，任何人都可以运行自己的节点，开始在任何区块链上提供智能合约，并可以访问任何链下数据源API。这促进了健康的竞争，并允许节点建立自己的业务模型，而无需其他所有节点的外部依赖。相反，BandChain采取的是共产主义的，中央计划的经济方法，该方法要求网络中的每个节点都经过标准化，并支持与网络中每个其他节点相同的功能和连接，最终限制了创新，竞争和采用。哪些开发人员或用户将信任那些不了解其核心功能到其协议中，没有学术研究或安全审核支持，并要求复制竞争对手解决方案的开发人员大量价值？ 这是BandChain如何利用现有技术，区块链和随机性功能，并试图迫使它们成为基于错误假设的Oracle解决方案的又一个示例。Chainlink允许数据请求者准确选择他们要使用的预言软件，从而为智能合约开发人员带来最大的灵活性。 Chainlink团队已经构建了Chainlink VRF，可以用作可证明是公平的随机性源，作为区块链游戏和NFT行业的输入，而不是Chainlink协议本身的核心部分。他们理解并避免了强迫数据请求者使用随机性选择节点的严重危险，特别是无法获得高质量或许可的数据集（如数据质量部分中所述）以及无法在网络上获得确定性保证的巨大安全风险。节点运营商的可靠性或基础架构安全性。Chainlink VRF已被广泛采用，在启动后的短时间内便进行了许多集成，包括：PoolTogether，Digitix，Get Protocol，Blocklords，Polyient Games，BlockPegnio，Vibe，Texel，Tiny Boxes，Cargo，Wildcards，FaceGolf和更多。 Chainlink的VRF建立在行业专家多年的学术研究基础之上，这些专家在分布式系统和高级密码学领域拥有数十年的经验，例如Ari Juels，Andrew Miller，Evan Cheng，Alex Coventry等（在下面的部分中进行详细介绍）。 Chainlink VRF不仅是由世界上一些最聪明的人内部开发的，而且还经过了顶级安全公司的审核，并经过了无数次审查才能投入生产。发展与网络效应Band团队缺乏在分布式系统，高级密码学和构建oracle方面的经验，已经放弃了最初的v1版本启动，无法捕获任何网络影响，并且Band v2完全未经验证，没有在生产中使用。 自2014年以来，Chainlink团队一直在建立Oracle，其团队由40多人组成，其中包括顶级学术和业务顾问。 Chainlink还为市场领先的DeFi项目确保了Mainnet上超过$ 10B的价值，并且集成管道中有240多个项目（包括60多个区块链）。Band v1在开发方面完全被放弃了，并且没有看到任何外部项目在生产中的使用。缺乏任何主网采用以及其价格信息的更新不频繁就证明了这一点，其中许多经常表现出较大的偏差。Band协议在设计上也进行了多次更改，包括放弃了其双令牌绑定曲线设计，等离子L2，Gas，稳定币费用支持，用户驱动的数据治理等。v1的性能不佳以及协议的不断变化质疑Band团队是否真的考虑了他们的Oracle机制的设计，以及是否可以信任他们以确保从其他用户的资金中获得数百万美元的价值。Band v2（BandChain）也未经Oracle系统的完全验证，尚不支持其原始主网上的任何Oracle功能。 BandChain的大部分与区块链相关的工作都外包给了Cosmos SDK和Tendermint。对于任何现实价值而言，都缺乏经过时间考验的安全性，这意味着Band仍需要证明自己是一种可靠的解决方案，然后任何项目才能放心地相信其oracle实现来保护核心协议功能。请务必记住，甲骨文负责其他dApp的关键任务功能，例如发放贷款和执行清算。当其他人正在考虑是否可以将整个协议的正确功能委托给您的外部Oracle机制时，成为一个好人或在您的墙上获得学位是毫无意义的。考虑到Band没有获得生产中的用户，已经进行了多次设计变更，并且仅使用提取了所有艰巨工作的SDK推出了区块链，因此任何希望使用BandChain的dApp都承担着严重的风险并且对其鲁their地进行粗鲁用户的资金。Band团队由三位创始人组成，他们在构建区块链基础架构，oracle机制或任何处理实际价值的关键任务系统方面没有经验。他们在软件开发方面的唯一经验是在2015年创建了基于加密的手机游戏，此游戏已被放弃。为儿童构建手机游戏与构建复杂的分布式系统并不遥不可及，后者不仅为Band令牌持有者确保价值，而且最终也希望确保其他应用程序的价值。这种经验几乎没有甚至没有交叉，因为建立一个区块链的甲骨文网络是一个具有挑战性的指数难题，并且存在许多明显的陷阱和攻击媒介。他们不仅缺乏经验，而且没有学术或商业顾问来指导他们。所有这些都表明Band团队处于顶峰，这将给使用它的任何人带来巨大风险，并在不可避免地发现和利用漏洞时打开Mt Gox类型的内爆。Chainlink,至少从2014年SmartContract LTD成立（以太坊推出之前）开始，Chainlink的联合创始人一直在研究和构建外部连接的智能合约和区块链Oracle技术。该团队直接与需要区块链Oracle的顶级开发人员和企业合作，他们通过开发已在生产中使用的可靠解决方案，了解了如何满足各种不同用例的安全性，隐私性和可扩展性需求，以及应用程序。他们从未放弃过自己的初衷，而是继续在创建的坚实基础上进行创新，包括TownCrier，Threshold签名，Mixicles等原始研究开发。Chainlink的40多人开发团队由区块链，甲骨文，密码学，机器学习，人工智能和业务开发方面的资深专家组成。其中包括众多学术和商业顾问，这对于Chainlink的技术和国防深度方法至关重要。Chainlink于一年前在主网上推出，并已迅速实现大型网络效应，目前已从许多领先的DeFi项目（包括Synthetix，Aave，Loopring，Nexus Mutual，Set Protocol，bZx，Kava， 和更多。 Chainlink还拥有240多个集成开发项目，从区块链和加密货币初创企业到Google，Oracle和SWIFT等全球企业以及Hyperledger，IC3，EEA，Baseline，InterWork等企业联盟/标准化组织等等。最终的结果是一个非常有经验和知识渊博的团队，他们有能力以加密初创公司，全球企业和顶尖学者的支持方式来解决甲骨文的难题。 开发人员拥有案例研究和明确的证明，Chainlink是一个安全可靠的Oracle解决方案，可通过在生产中的实际使用来确保高价值合同。 它的采用已经在推动一个积极的反馈循环，在该循环中，使用网络的用户，数据提供者和节点越多，对于新的和现有的利益相关者来说，作为Oracle解决方案的功能更强大，价值更高的Chainlink也就变得如此。 鉴于缺乏主网使用以及合作伙伴数量非常有限（大多数是验证者或交易所列表），Band无法实现任何网络效果。 此外，开发人员除了缺乏活力的v1版本外，还没有任何关于Band的预言的信息。资源效率与网络设计BandChain使用自己的区块链，这对于Oracle的工作是完全不必要的-将数据传送到智能合约。 Band团队正在使用区块链解决方案来解决一个根本不同的问题，这会导致许多问题，例如状态膨胀，同步时间长和强制随机节点选择。 Chainlink并非现在也永远不会是其专有的区块链，而是真正的与区块链无关的中间件，这使得它可以灵活地支持所有DLT网络和数据资源，并为节点运营商提供轻量级的支持。带BandChain区块链背后的设计选择（即两个秒的块时间）导致所有节点的状态膨胀迅速增长，而新节点或重新连接的节点的同步时间更长。运行Band节点比诸如Bitcoin和Ethereum之类的区块链要昂贵得多，并且要消耗大量资源，这些区块链已针对降低硬件要求进行了优化，以增加分散性。与完全不运行专有区块链的Chainlink oracle节点相比，它的成本和资源消耗也成倍增加。随着时间的流逝，BandChain的设计决策很可能自然导致集中度的提高，而节点大多由资本雄厚的验证者在几个数据中心中运行。这些问题与EOS和BSV等区块链受到的影响相同。为了支付运行节点的成本，如果用户费用没有增加到足够高的水平，BandChain将需要更高的新铸造令牌的通货膨胀率来维持相同级别的安全性。由于Band的预言机也是块生产者，因此，块生产的失败（例如最近Cosmos SDK中的内存泄漏和状态修剪问题）也会导致预兆机制的失败。将oracle机制直接集成到区块链的基础层中也将强制执行单个整体网络设计，这由于强制实施的标准化而阻碍了oracle的创新，并极大地限制了oracle在支持各种用例方面的概括（如数据质量部分）。BandChain通过隐秘方法通过一种安全措施有效地运作，其中验证者无需透露其身份或可靠性。 这与随机的股权加权选择相结合，意味着数据请求者必须信任在BandChain上运行的所有节点，因为他们无法控制最终将被选中的匿名或非匿名节点，从而给用户带来了很高的信任障碍。 这远非理想，因为大多数安全专家普遍认为通过模糊性来实现安全性是设计基本健壮的系统或网络的不良方法。由于Chainlink不是区块链，因此不会遭受状态膨胀或同步时间问题。 Chainlink节点重量轻，对硬件的要求极低，可以通过一个简单的Docker容器在任何计算环境中运行。甚至将节点设置为在Raspberry Pi等极低规格的设备上运行，从而使IoT设备可以直接运行Chainlink节点以减少智能合约的跳数。由于缺乏资源需求而导致的低进入门槛极大地增加了Chainlink网络整体的分散性。与BandChain不同，不需要所有活动Chainlink节点之间的整体全局共识，而是选择水平可伸缩性，即无限数量的oracle网络并行并行运行。 Chainlink节点不需要创建或验证任何专有区块链的块，因此不依赖于任何一个特定区块链的功能操作。对于每个单独的Oracle网络，Chainlink的安全性都是完全自主的。它没有做任何实现假设，而是提供了使用任何区块链所需的节点，数据源或参数来创建任何类型的oracle网络所需的工具。它是高度通用的，这意味着它不会对用户强加任何一种类型的oracle设计模式（推送或拉动，允许或不允许，集中或分散，开放或列入白名单，偏差阈值和/或心跳更新等），允许无限在新的Oracle模型上进行创新。当前在主网上运行的Chainlink网络通过透明性原理使用安全性进行操作，其中价格参考数据网络仅由经过安全审查的节点组成，这些节点由经验丰富的区块链DevOps和分布在全球数据中心和现场裸机中的安全团队操作服务器。此外，许多独立的团队创建了多种分析服务，使最终用户和开发人员都可以直接查看每个Oracle网络的性能和历史记录。这样，任何人都可以使用以简单易用的方式呈现的历史索引链上数据来确切地知道特定的Chainlink网络或节点是否可靠。这包括feeds.chain.link（由Chainlink创建），market.link（由LinkPool创建），reputation.link（由Secure Data Links创建），honeycomb.market（由CLCG创建）等。去中心化和加密经济安全由于Tendermint BFT的可伸缩性有限，BandChain使用具有100个节点上限的单个整体共识机制。验证器仅放样产生块，而对于操作或无效的外部数据则不加砍刀。 Chainlink是独立的分散式Oracle网络的集合，这些Oracle网络在众多区块链上并行运行，其阈值签名和链外聚合升级没有每个网络中节点数量的上限。 LINK放样将涉及绑定服务协议，并在数据质量，可靠性，准确性等方面采用预先定义的削减条件。由于BandChain使用Tendermint BFT共识进行操作，因此最多只能扩展到几百个验证器，然后通信带宽才成为问题和每秒事务（TPS）池。因此，Band在任何给定时间点的验证器数量有限，最多100个节点。这是使用整体式区块链作为处理数据请求和响应的唯一共识机制的另一个缺点。它极大地限制了BandChain将能够达到的最大分散级别，除非对整个网络模型进行根本性的重新设计。还需要注意的是，BandChain验证程序只有在充当糟糕的区块生产者（停机，双重签名，无响应）的情况下，才可以削减其BAND股份。充当不良或恶意的Oracle（操纵数据，Oracle网络攻击，串通）不会造成任何重大的惩罚。 BandChain中的验证者可能更专注于成为一个好的区块生产者，而不是成为一个好的预言家，因为这是决定他们是否被削减的原因。尽管零售业者已经讨论了BandChain Token，但现实是，验证者的零售股份并没有为BandChain作为Oracle网络提供任何真正的价值。将来，BandChain可能会对通过链上投票传递不良数据的节点实施大幅削减，但目前很少有细节，因为仅提一个小建议，因为它们已弃用的D3N规范中只有一句话。此后，有关该主题的信息已从其github wiki上的当前文档中删除，表明他们可能对该主题几乎没有积极的开发。尽管这个想法可能也已经被抛弃（就像许多其他以前的核心功能一样），但他们过去曾指出，零售BAND令牌涉众将有助于将数据提供者作为信誉系统机制进行管理。这代表了执行质量控制的一种非常脆弱和临界的危险形式，尤其是在考虑到它应该为价值数百万美元或更多的合同提供安全性时。散户投资者不太可能进行任何认真的尽职调查，而只会选择即时投资回报率最高的数据提供商。区块链不可知论的方法BandChain依靠尚未发布的Cosmos IBC将数据本地桥接到其他链。 当前，它仅支持lite客户端，在这些客户端中，数据必须由协议外部的未付费和可能未知的外部方传送。 Chainlink本机支持当今最领先的区块链，并将通过其自适应且易于集成的设计继续支持未来的链。由于BandChain是其自己的区块链，因此另一个要使用Band oracles的区块链上的去中心化应用程序完全依赖于跨链通信桥。 BandChain的主要跨链功能取决于Cosmos区块链内部通信（IBC）协议，该协议不是由其团队构建的，距离全面运行和经过时间考验还需要数月甚至数年的时间，尤其是对于不信任的数据传输而言从一个区块链环境到另一个。在此之前，将通过部署在每个集成区块链上的BandChain lite客户端执行区块链互操作性。使用Band作为预言的其他区块链上的智能合约将完全依赖于一些外部非激励性第三方向该链上的精简版客户合约提供证明。 BandChain验证器不会将这些证明提供给其他链（直到IBC为止），这意味着当前始终需要第三方在链之间中继数据。这种方法很难扩展，因为每个受支持的区块链将需要托管自己的lite客户合同，并需要Band协议之外的外部实体来提供证明并保持lite客户同步。关于将数据传递给精简客户的动机存在主要问题，尤其是在网络拥挤的情况下，当交易费用在外部区块链上飙升时。需要特别注意的是，即使BandChain在其自己的区块链上聚合数据，但将数据本身广播到其他区块链也将受使用链的本机速度和延迟的影响。 Bandchain当前仅支持少数几个Testnet区块链。Chainlink与区块链无关，但是以与BandChain根本不同的方式实现了此类功能。 Chainlink不是运行自己的专有区块链，而是一个框架，用于在任何区块链上为智能合约构建异构的分散式Oracle网络。通过模块化的外部适配器和外部启动器，Chainlink节点能够监视数据请求并将链外数据直接传递到任何区块链环境，这意味着不依赖具有可疑激励/问责制的精简客户或外部第三方。因此，Chainlink节点能够本地支持当前或将来存在的任何区块链，DLT或layer2解决方案，包括智能合约功能有限的链，例如无法托管此类lite客户端的比特币。这还包括非IBC兼容的许可链和非区块链系统，例如企业ERP / CRM后端和旧数据库，这些系统希望从加密经济保护的分散式Oracle网络中创建和使用外部数据。Chainlink网络上受支持的区块链包括以太坊，比特币，Polkadot，Ava，NEAR，Kava，Tezos，Binance Smart Chain，BSN，IRIS，基于EVM的链，基于基质的链，Harmony，Zilliqa，本体论，Kadena，Klaytn，CasperLabs， Solana，Hdac，ICON，Conflux，Hedera Hashgraph，Matic等。有60多个区块链被集成到Chainlink协议中。最初在以太坊区块链上启动时，Chainlink的合同系统被重写为可以在其他众多区块链上本地运行，而LINK令牌则通过跨链桥包装。因此，每个Chainlink甲骨文网络仅需遵循其所运行的特定链的吞吐量和安全性假设。即使有IBC支持（Chainlink也可以支持），Chainlink的区块链不可知论形式的规模可以远远超过BandChain。代替Bandchain通过单个区块链传递数据请求和节点响应的方法，Chainlink网络可以并行且彼此完全独立地处理数据请求和节点响应，从而提供理论上无限的水平可扩展性。 Chainlink在每个词义上都是与区块链无关的，因为它不是区块链，而是在所有区块链网络上同时运行的抽象层。结论Chainlink与区块链行业中最著名的研究人员一起进行两次测量并进行一次切割，以进行敏捷开发，以保持在新的前沿技术和创新之上。团队认识到了考虑周到且端到端的安全Oracle框架的重要性，该框架可以提前缓解复杂的攻击媒介。Band的做法更像是将意大利面条扔在墙上，看看遵循“快速行动并打破事物”的理念的实质，换句话说。尽管此方法可以在某些行业中使用，但绝对不是绝对必要的解决方案，它可以解决oracle问题，因为绝对安全是必须的，实际价值很容易受到无法逆转的操纵。经过全面比较，Band协议将采用基于区块链的方法，通过使用整体共识来解决oracle问题，这将强制执行节点的标准化并对其分散有上限。这种僵化的模式是Band努力以可扩展的方式支持经过身份验证的API的原因，因为如果不从头开始重新设计整个数据行业，几乎所有节点都无法在其框架中支持凭据数据。他们的大多数原始开发和设计规范已被放弃，未来的功能集几乎完全是理论上的，极其模糊的或根本不存在的。虽然探索和更改有时可能会很好，但它们也可能表明有人在他们的头顶上，这尤其应与构建oracle协议时所面临的风险有关。另外，Chainlink已确定Oracle问题与区块链问题是分开的，它采用了高度模块化的自由市场框架，该框架支持无限数量的并行Oracle网络，这些网络达成共识并保持彼此完全独立的安全性。 Chainlink用户可以在多个方面访问高级定制，包括节点选择，数据类型，安全性方法，抵押抵押，隐私支持等等。 Chainlink团队证明了其能够支持主网上DeFi项目的大型生态系统，确保超过10亿美元的用户资金的能力。 Chainlink已经在建立公益的Oracle网络，其中多个用户贡献相同的价格，从而降低了每个用户的成本。尽管竞争是健康的，每个人都应该尽自己的努力，但真正检查用于直接保护大量用户资金的预言机机制很重要。如果智能合约经济有望扩大规模，并被风险偏好更为保守，对灵活性和质量控制有更高要求的传统机构所利用，那么，Oracle可以轻而易举。Oracle的“足够好”方法恰恰是遭到黑客入侵并失去用户资金的开发人员的心态。这与部署未经审计的智能合约没有什么不同，智能合约面临着巨大的未知安全风险，这些风险可能会使项目及其用户完全破产。同样，非通用解决方案可能会在短期内服务于一个细分市场，但会像许多高科技行业一样被通用标准所吞并。出于这些原因，需要通过智能合约的价值和通用性来扩大安全性，以增强卓越的网络效果，我们认为，与Band Protocol相比，Chainlink迄今为止是一个非常出色的oracle解决方案。","categories":[{"name":"blockchain","slug":"blockchain","permalink":"http://yangxinqi.com/categories/blockchain/"}],"tags":[{"name":"oracle, band, chainlink","slug":"oracle-band-chainlink","permalink":"http://yangxinqi.com/tags/oracle-band-chainlink/"}]},{"title":"DEFI深入浅出实战编程一入门篇","slug":"DEFI深入浅出实战编程一入门篇","date":"2020-09-24T10:47:25.000Z","updated":"2020-09-24T11:24:40.645Z","comments":true,"path":"2020/09/24/DEFI深入浅出实战编程一入门篇/","link":"","permalink":"http://yangxinqi.com/2020/09/24/DEFI深入浅出实战编程一入门篇/","excerpt":"","text":"翻译者： 大杨， 链因智能CEO， 一家初创区块链技术公司，DEFI布道者。技术点： DEFI，ETH，NODEJS，SOLIDITY今天抽出了一些时间，翻译了CoinBase的Pete Kim 写的【Introduction to Building on DeFi with Ethereum and USDC — Part 1】DEFI编程入门学习的文章。翻了下Pete Kim的twitter和他的github，发现是个全栈高手和社区活跃者，看上去应该是韩国人，技术很不错，人也很帅 😂。最为美系的第一交易所CoinBase对整个Crypto生态的贡献是巨大的，本篇DEFI编程的入门文章也非常适合新手，看了有很想翻译的冲动，就花了2小时做了下整理，并在kovan的网络上实战了一把，对很多细节的地方做了补充，强烈推荐给大家。 经历DEFI，后续链因智能3年积累的相关技术都会进行开源，通过开源促进技术发展。以下是文章的内容：首先介绍 CoinBase 的价值观和愿景。在Coinbase，我们的任务是建立一个开放的财务系统。我们坚信，促进经济自由将使世界变得更美好。分布式金融，简称DeFi-一种开放，无边界和可编程的金融-是我们伟大愿景不可分割的一部分。智能合约DeFi由运行在分布式网络（例如以太坊（“区块链”））上的数字货币（如美元代币（USDC））智能合约组成。智能合约的想法由来实际上很简单。数字货币和密码学的先驱尼克·萨博（Nick Szabo）最初在1997年提出了这个想法，他将自动售货机描述为智能合约的始祖。自动售货机是合同的自动化版本，以电子硬件的形式表示：您通过向机器中投入钱来支付显示的价格，机器将为您分配饮料您不支付显示的价格，也不分配饮料如果您支付了显示的价格但机器没有分配饮料，或者即使您没有支付显示的价格也分配了饮料，则违反了合同自动售货机无需人工干预即可完全自主地管理其合同义务。现代智能合约的工作方式相同，但是合约条款被表示为可执行的计算机代码，而不是在硬件中实现。在其上运行智能合约的网络的分散性确保了它们以书面形式执行，并且没有任何单个实体能够弯曲规则或操纵结果。一个重要的警告是，因为网络逐字执行代码，所以错误的智能合约代码可能会导致意外的后果（“代码就是法律”）。没有比现在更好的时机许多人发现基于加密技术构建的区块链非常令人生畏，并认为只有坚韧的计算机科学家才能使用它。尽管就在几年前，情况确实如此，但自那时以来，工具和开发人员用户体验已有了显着改善，任何具有基本编程技能的人都可以开始构建。DeFi生态系统目前正在爆炸性增长。 USDC在不到2年的时间里达到了$1B的市值，并且在不到3年的时间内，存储在各种DeFi服务中的资产总值超过$2B。确实没有一个哪个领域有这么好的时机快速发展。来源：DeFi Pulse以下教程是开始开发自己的DeFi智能合约的简单指南。我们希望，这样的指南将有助于建立全球开放的民主化金融体系。入门本教程系列假定您具有JavaScript的经验，JavaScript是世界上使用最广泛的编程语言。您也可能被介绍过Solidity，这是一种在以太坊上使用的智能合约编程语言，这是世界上使用最广泛的智能合约区块链编程语言。最后，您将与DeFi应用常用稳定币USDC进行交互（这里我们Fake了一个USDC，不是真实USDC）。搭建开发环境首先，我们需要一个类似Unix的环境，并在其上安装Node.js v12.x（最新的LTS版本）。 MacOS本质上是Unix环境，Windows用户可以通过从Microsoft Store在WSL上安装Ubuntu来获得它。在MacOS和Windows中可以找到更详细的步骤。对于代码编辑器，强烈建议使用 Visual Studio Code，因为您要使用的项目模板已经预先配置好了，但是从技术上讲，您可以使用任何编辑器。哦，我更喜欢Vim而不是Emacs。设置项目设置Solidity项目需要一些工作，老实说，分心对于这个阶段的学习不是很有用，因此已经为您准备了一个预先配置的模板。这块作者提供了一个很好的模版来跑，原地址： https://github.com/CoinbaseStablecoin/solidity-tutorial ，这里我做了一些修改，FORK了一个项目地址，大家需要看代码的可以用下面的地址，作者提供的模版非常方便，可以让动手，推荐使用作者的地址。在终端中运行以下命令以下载并设置模板：12345git clone https://github.com/CoinbaseStablecoin/solidity-tutorial.git # 作者原模版地址git clone https://github.com/chaininout/solidity-tutorial.git # 这个是包含了最新代码的地址cd solidity-tutorialnpm install -g yarn # Install yarn package manager 安装包管理器yarn # Install project dependencies 安装依赖当yarn尝试构建本机扩展时，您可能会看到一些编译错误。这些是可选的，可以忽略这些错误。只要您最后看到“完成”消息，就可以继续。在Visual Studio Code中打开项目在Visual Studio Code中打开项目文件夹（solidity-tutorial）。第一次打开项目时，Visual Studio Code可能会提示您安装扩展。继续并单击“全部安装”，这将向编辑器添加各种有用的扩展，例如自动代码格式和Solidity语法突出显示。在以太坊上创建账户在以太坊上进行任何操作之前，您需要拥有一个帐户。帐户通常称为“钱包”，因为它们可以包含ETH和USDC等数字资产。最终用户通常使用Coinbase Wallet或Metamask等以太坊钱包应用程序创建帐户，但是使用模板随附的出色的ethers.js库，以编程方式创建帐户也非常简单。在src文件夹中创建一个名为createWallet.js的新JavaScript文件，然后输入以下代码：保存文件，并使用Node执行代码，如下所示：1234const ethers = require(\"ethers\");const wallet = ethers.Wallet.createRandom();console.log(`Mnemonic: $&#123;wallet.mnemonic.phrase&#125;`);console.log(`Address: $&#123;wallet.address&#125;`);在shell命令行状态下执行：1node src/createWallet.js执行后生成如下结果, 生成助记词和地址：12Mnemonic: viable glow tone pole input series weather slam blouse embark achieve positionAddress: 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008刚才发生了什么？ 好吧，您拥有了一个全新的以太坊账户。 “助记符”或可能更普遍地称为“恢复短语”是从帐户执行操作所需的密钥的人类可读表示，并且地址是帐户的名称和标识符。将它们复制到某个地方。附带说明一下，本文中显示的助记符已稍作更改，以阻止您使用它，请使用您自己的助记符！可以将它们视为银行帐户的密码和帐号，只需要几秒钟即可创建一个，并且不必填写申请表或共享任何个人信息。您也可以在任何地方运行此代码。⚠️注意该帐户的记忆符号必须保密。如果丢失，您将永远无法访问您的帐户以及该帐户中存储的所有资产，没有人能够为您提供帮助！妥善保管！从技术上讲，您本身并没有真正“创建”帐户。相反，您创建的是私钥/公钥对。如果您对引擎盖下实际发生的事情感到好奇，请阅读椭圆曲线密码学以及比特币和以太坊规范BIP39，BIP32，EIP55及其在此项目中的实现。关于Gas燃料和挖矿以太坊是一个分布式网络，由世界各地成千上万的计算机组成，它们并非完全免费。要在区块链上执行任何状态更改（例如存储和更新数据），您必须向网络运营商支付以太坊（ETH）的交易费，在以太坊上也称为“ GAS”。这与运营商为在链中添加新区块而获得的奖励一样，也激励着他们保持计算机正常运行。此过程称为“挖矿”，而网络运营商称为“矿工”。我们将在本教程的后面部分（GAS，GAS价格和GAS限制）再次讨论这一点。获取测试网ETH现在您已经有一个帐户，您应该存入一些ETH。我们不想在开发时浪费真钱，因此我们将获得一些假的ETH，用于在测试网络（“ testnet”）上进行开发和测试。有许多不同的以太坊测试网，但由于容易获得测试Token，因此我们将使用Kovan。首先，让我们使用以太坊的区块浏览器Etherscan检查当前余额。为此，您可以在浏览器中输入以下网址，然后用您之前创建的地址（从0x开始）替换 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008。https://kovan.etherscan.io/address/0x6598f11d48Da2bfA897d5Eb3968223f98dabc008您应该看到您的余额为0 ETH。保持此选项卡处于打开状态，然后在其他选项卡中打开Kovan Ethereum Faucet 地址： https://faucet.kovan.network。在页面中，输入您的地址，然后单击“发送给我”按钮。交易可能只需要几秒钟到一分钟或一两分钟即可完成。再次检查Etherscan，您应该在列表中看到1 ETH的新余额和一笔传入交易。资料来源：https://faucet.kovan.network以编程方式获取ETH余额连接以太坊，使用Etherscan查看余额非常有用，但是也可以通过代码轻松查看余额。但是，在回到代码之前，我们需要一种连接到以太坊的方法。有很多方法可以做到这一点，包括自己在计算机上运行网络节点，但是到目前为止，最快，最简单的方法是通过诸如INFURA或Alchemy之类的托管节点提供程序来实现，也可以自建节点。前往INFURA，创建一个免费帐户并创建一个新项目以获取API密钥（项目ID），链接这里： https://infura.io/dashboard/ethereum 注册后在面板中创建自己的Project，然后拿到APIKEY。如果要自己搭建节点，也可以使用Go Ethereum（“ geth”）和Open Ethereum（以前称为Parity Ethereum）是两种使用最广泛的以太坊节点软件，这里后续我会在后续章节中列举节点搭建。用代码查看ETH余额首先，让我们编写代码以从助记符中读取并获取帐户。在src文件夹中创建一个名为wallet.js的新JavaScript文件，然后输入以下代码：1234567891011const ethers = require(\"ethers\");// Replace the following with your own mnemonic 这里输入刚刚生成的助记词const mnemonic = \"rabbit enforce proof always embrace tennis version reward scout shock license wing\";const wallet = ethers.Wallet.fromMnemonic(mnemonic);console.log(`Mnemonic: $&#123;wallet.mnemonic.phrase&#125;`);console.log(`Address: $&#123;wallet.address&#125;`);module.exports = wallet;用您自己的代码替换助记符字符串。请注意，在生产代码中，助记符不应该这样硬编码。相反，应从配置文件或环境变量中读取它，以免例如由于将其检入源代码存储库而意外泄漏。执行代码，您应该能够看到与之前获得的地址相同的地址：123➜ solidity-tutorial git:(master) ✗ node src/wallet.jsMnemonic: viable glow tone pole input series weather slam blouse embark achieve positionAddress: 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008看到生成的地址：0x6598f11d48Da2bfA897d5Eb3968223f98dabc008接下来，在同一文件夹中创建一个名为provider.js的新文件。在此文件中，我们将使用我们先前获得的INFURA API密钥初始化提供者对象。确保将API密钥字符串替换为您自己的字符串：12345678const ethers = require(\"ethers\");// 注意这里我们使用的kovan的网络，下面是infura上申请的keyconst provider = ethers.getDefaultProvider(\"kovan\", &#123; // Replace the following with your own INFURA API key infura: \"c844845b06f84d379ba3fb3bba5a1f99\",&#125;);module.exports = provider;注意这里需要在truffle-config.js进行网络配置：12345678910networks: &#123; development: &#123; host: \"localhost\", port: 8545, network_id: \"*\", &#125;, mainnet: infuraProvider(\"mainnet\", 1), ropsten: infuraProvider(\"ropsten\", 3), kovan: infuraProvider(\"kovan\", 42), //这个是我们加上的测试网络，因为比较快&#125;,最后，我们将使用在同一文件夹中新建名为getBalance.js的新文件，并通过wallet.js和provider.js来获取ETH余额：1234567891011const ethers = require(\"ethers\");const wallet = require(\"./wallet\");const provider = require(\"./provider\");async function main() &#123; const account = wallet.connect(provider); const balance = await account.getBalance(); console.log(`ETH Balance: $&#123;ethers.utils.formatUnits(balance, 18)&#125;`);&#125;main();运行代码，您将看到ETH余额！1234node src/getBalance.jsMnemonic: viable glow tone pole input series weather slam blouse embark achieve positionAddress: 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008ETH Balance: 1.0代币计价我们刚刚创建的代码很容易解释，但是您可能想知道ethers.utils.formatUnits（balance，18）的作用。好吧，ETH实际上可以整除到小数点后18位，最小的面额单位称为“ wei”（发音为“ way”）。换句话说，一个ETH等于1,000,000,000,000,000,000 wei。另一个常见的面额是Gwei（发音为“ Giga-way”），为10亿魏。 getBalance方法碰巧以wei返回结果，因此我们必须通过将结果乘以10⁸将其转换回ETH。可以在这里找到所有面额的清单。您还可以使用ethers.utils.formatEther（balance），这是ethers.utils.formatUnits（balance，18）的简写。获取Testnet USDC您帐户中的ETH感到有些孤单，所以我们也想获取其中的USDC。我在Kovan测试网上部署了一个FakeUSDC智能合约。它没有专门的水龙头网站，但合同包含一项功能，在调用该功能时，您将获得一些免费的Kovan测试网USDC。如果您导航到Etherscan中的合同代码选项卡，并在合同源代码中搜索gimmeSome。这就是我们要调用的功能，用于将一些USDC发送到我们的帐户。1234567891011121314151617181920212223pragma solidity 0.6.12;contract FakeUSDC is Ownable, ERC20 &#123; constructor() public Ownable() ERC20(\"FakeUSDC\", \"USDC\") &#123; _setupDecimals(6); &#125; function mint(address account, uint256 amount) external onlyOwner &#123; _mint(account, amount); &#125; function burn(address account, uint256 amount) external onlyOwner &#123; _burn(account, amount); &#125; /** * @notice Give the caller 10 USDC (10,000,000 units) * 这里我们加了个给测试账户发送代币的方法，能够免费给账户发送USDC测试代币 */ function gimmeSome() external &#123; _mint(msg.sender, 10e6); &#125;&#125;进行交易以调用智能合约在以太坊智能合约中主要有两种类型的功能：读写和只读。前者可能导致存储在区块链中的数据发生变化，而后者纯粹是读取但从未写入。可以在不创建事务的情况下调用只读函数，因此无需支付交易费用，除非作为读写函数的一部分进行调用。另一方面，必须在交易内部调用读写功能，并且必须支付交易费（GAS）。调用gimmeSome函数会导致存储在区块链中的USDC余额发生变化，因此必须在交易内部调用它。调用智能合约功能需要一些额外的步骤，但这并不太困难。首先，我们需要找到我们要调用的函数的完整接口，也称为函数签名或函数原型。在合同源代码中再次查找gimmeSome，您将发现界面如下：1function gimmeSome() external这是一个非常简单的函数，不带任何参数，并且被标记为外部函数，这意味着该函数只能从外部调用，而不能从该协定内的其他函数调用。因为我们将在事务中直接调用此函数。显而易见，在以太坊主网络上部署的“真实” USDC合约中 不存在gimmeSome功能。 下面需要去部署智能合约，才能获取合约的地址，以便在下面调用：1MNEMONIC=\"viable glow tone pole input series weather slam blouse embark achieve position\" INFURA_API_KEY=\"c844845b06f84d379ba3fb3bba5a1f99\" truffle deploy --network=kovan我们执行 truffle deploy 命令，在kovan测试网络中发布我们写好的合约。 签名的2个是地址的私钥和INFURA的KEY，这样能够用这个账户部署合约，部署完成后将现实如下过程，部署的合约数量和总共花费的GAS的费用。123456789101112131415161718192021222324252627283_init_FakeUSDC.js================== Deploying 'FakeUSDC' -------------------- &gt; transaction hash: 0x239e6922e55957d964dec79ffc2a8667b375c87185e47a334d824ffea89d9c0f &gt; Blocks: 1 Seconds: 5 &gt; contract address: 0x4bB2ef39DD99A01BD5C11dDd25F890FeB45081e9 # 这个我们在后续要用到 &gt; block number: 21121362 &gt; block timestamp: 1600937752 &gt; account: 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008 &gt; balance: 0.95161372 &gt; gas used: 1705672 (0x1a06c8) &gt; gas price: 20 gwei &gt; value sent: 0 ETH &gt; total cost: 0.03411344 ETH &gt; Saving migration to chain. &gt; Saving artifacts ------------------------------------- &gt; Total cost: 0.03411344 ETHSummary=======&gt; Total deployments: 3&gt; Final cost: 0.03985546 ETH拿到合约地址，在src文件夹中创建一个名为getTestnetUSDC.js的新文件，然后输入以下代码：12345678910111213141516171819202122const ethers = require(\"ethers\");const wallet = require(\"./wallet\");const provider = require(\"./provider\");async function main() &#123; const account = wallet.connect(provider); const usdc = new ethers.Contract( \"0x68ec573C119826db2eaEA1Efbfc2970cDaC869c4\", //这里是我们发布的合约地址 [\"function gimmeSome() external\"], //我们本次需要调用的函数名 account ); const tx = await usdc.gimmeSome(&#123; gasPrice: 20e9 &#125;); //指定gas console.log(`Transaction hash: $&#123;tx.hash&#125;`); const receipt = await tx.wait(); console.log(`Transaction confirmed in block $&#123;receipt.blockNumber&#125;`); console.log(`Gas used: $&#123;receipt.gasUsed.toString()&#125;`);&#125;main();该代码首先使用我们感兴趣的函数gimmeSome的接口实例化一个合同对象（新ethers.Contract），并将其指向testnet Fake USDC合同的地址：0x68ec⋯69c4。然后，您可以调用列出的任何功能。 gimmeSome函数本身不会接受任何参数，但是您可以将事务选项指定为最后一个参数。在这种情况下，我们给它20 Gwei的GAS价格，这将加快交易速度。本质上，与网络交互的所有方法都是异步的，并返回Promise，因此我们使用的是JavaScript的await表达式。然后，代码将打印交易哈希，这是您交易的唯一标识符，可用于跟踪进度。然后等待直到确认交易。运行代码，您将看到类似以下内容：1node src/getTestnetUSDC.js输出结果：123456➜ solidity-tutorial git:(master) ✗ node src/getTestnetUSDC.jsMnemonic: viable glow tone pole input series weather slam blouse embark achieve positionAddress: 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008Transaction hash: 0xf7ca007d794ea7d530da36b8cc55f6dce3c99276d65d45e0d32ea10290505666Transaction confirmed in block 21121386Gas used: 65221瞧！您已经使用代码进行了首次以太坊交易！在Kovan Etherscan中检查您的地址和交易哈希。现在您应该看到，由于执行交易所支付的汽油费用，您现在拥有10个测试网USDC和略少于1 ETH。ℹ️如果您在Etherscan中检查交易，您会发现这是将 （0）ETH与4字节数据一起发送到合约地址的交易。如果函数调用具有参数，则将不止4个字节的数据。如果您想了解此数据的编码方式，请阅读以太坊合约ABI规范。GAS，GAS价格和GAS限额之前，我提到过，我们为交易提供20 Gwei的价格，以加快交易速度，并且脚本还显示使用的GAS量。这些都是什么意思？嗯，以太坊是一个由网络运营商组成的网络。将其视为一台世界计算机。它不是一台免费的计算机，您在该计算机上运行的每条指令都需要钱。该计算机也被世界各地的所有人共享，这意味着每个人都必须互相竞争才能在此计算机上花费时间。我们如何做到这一点？好吧，我们可以在这台计算机上拍卖时间，而您愿意为在此计算机上运行的每条计算指令支付的费用越多，网络运营商（矿工）将给您更多的时间。这种确定不是完美的，因为它可能会导致只有富人才能使用此系统的特权。但是，这是我们拥有的最差的解决方案，直到系统具有更高的可伸缩性并可以容纳更多的交易为止。回到区块链的术语上，“已使用的GAS”是您运行交易后消耗的计算资源量，“GAS价格”是您愿意为每单位天然气支付多少费用。通常，您愿意支付的费用越高，交易的优先级就越高，并且网络会更快地对其进行确认。在我们的案例中，我们使用20 Gwei作为GAS价格，使用的GAS为35121（您还可以通过在Etherscan中检查交易来找到此价格），因此总GAS成本为35121 20 Gwei = 702,420 Gwei 或0.00070242 ETH。由于用GAS要花钱，因此您可能需要设置您愿意花费的最大GAS上限。幸运的是，您可以设置“GAS限制”。如果交易最终需要的GAS超过指定的GAS上限，则交易将失败，而不是继续执行并消耗比您愿意支付的更多的GAS。要注意的一个副作用是，*如果执行由于限制而最终失败，那么已花费的汽油量将不会退还给您。调用智能合约功能以读取数据您可以检查是否在Etherscan上收到了10 USDC，但请通过代码检查余额来确认这一点。我们在src文件夹中的创建个新文件getFakeUSDCBalance.js，内容如下：1234567891011121314151617181920212223242526const ethers = require(\"ethers\");const wallet = require(\"./wallet\");const provider = require(\"./provider\");async function main() &#123; const account = wallet.connect(provider); // Define FakeUSDC contract interface const usdc = new ethers.Contract( \"0x4bB2ef39DD99A01BD5C11dDd25F890FeB45081e9\", [ \"function balanceOf(address _owner) public view returns (uint256 balance)\", ], account ); // get eth const ethBalance = await account.getBalance(); console.log(`ETH Balance: $&#123;ethers.utils.formatEther(ethBalance)&#125;`); // Call FackUSDC balanceOf function const usdcBalance = await usdc.balanceOf(account.address); console.log(`USDC Balance: $&#123;ethers.utils.formatUnits(usdcBalance, 6)&#125;`);&#125;main();USDC是ERC20代币，因此它包含ERC20规范中定义的所有方法。 balanceOf是其中之一，其接口直接来自规格。 balanceOf是一个只读函数，因此可以免费调用，不需要作为事务提交。 最后，重要的是要注意，USDC使用6个小数位精度，而许多其他ERC20令牌使用18个精度。您可以在此处了解有关Solidity函数的更多信息。运行代码，现在您还将看到USDC余额：执行：12345➜ solidity-tutorial git:(master) ✗ node src/getFakeUSDCBalance.js Mnemonic: viable glow tone pole input series weather slam blouse embark achieve positionAddress: 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008ETH Balance: 0.9497621USDC Balance: 10.0 //这里拿到了 USDC返回的数量转移ETH和USDC现在，让我们看看如何使用帐户中的ETH和USDC。转移ETH在src文件夹中创建transferETH.js并输入以下代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950const ethers = require(\"ethers\");const wallet = require(\"./wallet\");const provider = require(\"./provider\");async function main(args) &#123; const account = wallet.connect(provider); let to, value; // Parse the first argument - recipient address try &#123; to = ethers.utils.getAddress(args[0]); &#125; catch &#123; console.error(`Invalid recipient address: $&#123;args[0]&#125;`); process.exit(1); &#125; // Parse the second argument - amount try &#123; value = ethers.utils.parseEther(args[1]); if (value.isNegative()) &#123; throw new Error(); &#125; &#125; catch &#123; console.error(`Invalid amount: $&#123;args[1]&#125;`); process.exit(1); &#125; const valueFormatted = ethers.utils.formatEther(value); // Check that the account has sufficient balance const balance = await account.getBalance(); if (balance.lt(value)) &#123; const balanceFormatted = ethers.utils.formatEther(balance); console.error( `Insufficient balance to send $&#123;valueFormatted&#125; (You have $&#123;balanceFormatted&#125;)` ); process.exit(1); &#125; console.log(`Transferring $&#123;valueFormatted&#125; ETH to $&#123;to&#125;...`); // Submit transaction const tx = await account.sendTransaction(&#123; to, value, gasPrice: 20e9 &#125;); console.log(`Transaction hash: $&#123;tx.hash&#125;`); const receipt = await tx.wait(); console.log(`Transaction confirmed in block $&#123;receipt.blockNumber&#125;`);&#125;main(process.argv.slice(2));这段代码虽然比以前的代码长，但实际上只是到目前为止所学到的一切的结合。该脚本接受两个命令行参数。第一个是收件人地址，第二个是发送金额。然后，它确保提供的地址有效，提供的金额不为负，并且帐户具有足够的余额以能够发送所请求的金额。然后，它提交交易并等待确认。使用我们之前创建的createWallet.js脚本创建一个新帐户，然后尝试向新地址汇款：123➜ solidity-tutorial git:(master) ✗ node src/createWallet.js Mnemonic: put among keep license two negative version uniform claw zebra health inputAddress: 0x7B6d22b2130e585f5dacb40dE9Ff9DbD23E5CDB0我们建了个新地址，在将0.1 ETH转移到 0x7B6d22b2130e585f5dacb40dE9Ff9DbD23E5CDB0 新地址上：123456➜ solidity-tutorial git:(master) ✗ node src/transferETH.js 0x7B6d22b2130e585f5dacb40dE9Ff9DbD23E5CDB0 0.1Mnemonic: viable glow tone pole input series weather slam blouse embark achieve positionAddress: 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008Transferring 0.1 ETH to 0x7B6d22b2130e585f5dacb40dE9Ff9DbD23E5CDB0...Transaction hash: 0x91cb73c1ed608eec56eb6c81319bc232c8a0a7d0023eda87d1631ac45f29f49aTransaction confirmed in block 21121715您可以在Etherscan中验证结果。我们还要测试验证逻辑是否有效, 以下是一些无效的例子：123456789101112$ node src/transferETH.js fooAddress: 0xB3512cF013F71598F359bd5CA3f53C1F4260956aInvalid address: foo$ node src/transferETH.js 0xDdAC089Fe56F0a9C70e6a04C74DCE52F86a91e13 0.1.2Address: 0xB3512cF013F71598F359bd5CA3f53C1F4260956aInvalid amount: 0.1.2$ node src/transferETH.js 0xDdAC089Fe56F0a9C70e6a04C74DCE52F86a91e13 -0.1Address: 0xB3512cF013F71598F359bd5CA3f53C1F4260956aInvalid amount: -0.1$ node src/transferETH.js 0xDdAC089Fe56F0a9C70e6a04C74DCE52F86a91e13 100Address: 0xB3512cF013F71598F359bd5CA3f53C1F4260956aInsufficient balance to send 100.0 (You have 0.89328474)转移USDC您将能够复用大部分代码。主要区别在于USDC有6个小数位，并且您必须使用ERC20规格的传递函数来执行交易。您还需要将参数“ to”和“ value”传递给转让智能合约功能，而不是以太坊交易本身。在同一文件夹中创建transferUSDC.js并输入以下内容：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061const ethers = require(\"ethers\");const wallet = require(\"./wallet\");const provider = require(\"./provider\");async function main(args) &#123; const account = wallet.connect(provider); // Define balanceOf and transfer functions in the contract const usdc = new ethers.Contract( \"0x4bB2ef39DD99A01BD5C11dDd25F890FeB45081e9\", [ \"function balanceOf(address _owner) public view returns (uint256 balance)\", \"function transfer(address _to, uint256 _value) public returns (bool success)\", ], account ); let to, value; // Parse the first argument - recipient address try &#123; to = ethers.utils.getAddress(args[0]); &#125; catch &#123; console.error(`Invalid address: $&#123;args[0]&#125;`); process.exit(1); &#125; // Parse the second argument - amount try &#123; value = ethers.utils.parseUnits(args[1], 6); if (value.isNegative()) &#123; throw new Error(); &#125; &#125; catch &#123; console.error(`Invalid amount: $&#123;args[1]&#125;`); process.exit(1); &#125; const valueFormatted = ethers.utils.formatUnits(value, 6); // Check that the account has sufficient balance const balance = await usdc.balanceOf(account.address); if (balance.lt(value)) &#123; const balanceFormatted = ethers.utils.formatUnits(balance, 6); console.error( `Insufficient balance to send $&#123;valueFormatted&#125; (You have $&#123;balanceFormatted&#125;)` ); process.exit(1); &#125; console.log(`Transferring $&#123;valueFormatted&#125; USDC to $&#123;to&#125;...`); // Submit a transaction to call the transfer function const tx = await usdc.transfer(to, value, &#123; gasPrice: 20e9 &#125;); console.log(`Transaction hash: $&#123;tx.hash&#125;`); const receipt = await tx.wait(); console.log(`Transaction confirmed in block $&#123;receipt.blockNumber&#125;`);&#125;main(process.argv.slice(2));尝试一下向新地址转1个FakeUSDC，它应该也可以正常工作：123456➜ solidity-tutorial git:(master) ✗ node src/transferUSDC.js 0x7B6d22b2130e585f5dacb40dE9Ff9DbD23E5CDB0 1Mnemonic: viable glow tone pole input series weather slam blouse embark achieve positionAddress: 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008Transferring 1.0 USDC to 0x7B6d22b2130e585f5dacb40dE9Ff9DbD23E5CDB0...Transaction hash: 0xb81d2844a086750f5b6e3a71778fc4362cc913cc9960aacdce7028c627e7f49dTransaction confirmed in block 21121797恭喜你，完成了！最后看看之前的地址还有多少个ETH和USDC12345➜ solidity-tutorial git:(master) ✗ node src/getFakeUSDCBalance.js Mnemonic: viable glow tone pole input series weather slam blouse embark achieve positionAddress: 0x6598f11d48Da2bfA897d5Eb3968223f98dabc008ETH Balance: 0.84831602USDC Balance: 9.0 // 这里的USDC就剩下9个了在本教程中，您学习了如何生成帐户，查询余额，转移代币以及调用智能合约。您可能以为您对加密还不很了解，但是实际上您已经足够了解能够构建自己的加密钱包应用程序了。我们一直在编写命令行脚本来简化操作，但是如何使用基于Web的漂亮图形界面来完成作业来构建脚本呢？在本教程系列的下一部分中，我们将使用Solidity从零开始编写我们自己的以太坊智能合约，并学习如何构建自己的可与USDC交换的代币。我们还将使用今天学到的技术与该合约进行互动。敬请关注。这个是之前作者的下一篇， 之后大杨会加上如何使用脚本自动化的调用Uniswap进行自动交易。如果您对分布式金融DEFI的未来感兴趣，请关注Chaininout链因智能，大杨作为创始人，会努力的科普DEFI技能，促进生态发展。作者原文中有CoinBase的免责声明，这里略过，以下也是常规的我们的免责声明。以上表达的观点是作者的观点，并不代表Chaininout链因智能的观点和立场。信息仅用于一般教育目的，并不构成对金融产品的投资或其他建议。大杨和Chaininout对本篇内容上任何信息的准确性，完整性，及时性，适用性或有效性不做任何陈述，对于该信息的任何错误，遗漏或延误，或因其造成的任何损失，伤害或损害，概不负责。显示或使用。除非另有说明，否则本文提供的所有图像均为大杨的财产，所有商标均为其各自所有者的财产。","categories":[{"name":"blockchain","slug":"blockchain","permalink":"http://yangxinqi.com/categories/blockchain/"}],"tags":[{"name":"DEFI ETH NODEJS SOLIDITY","slug":"DEFI-ETH-NODEJS-SOLIDITY","permalink":"http://yangxinqi.com/tags/DEFI-ETH-NODEJS-SOLIDITY/"}]},{"title":"数字金融数据科学系列-Tushare实战","slug":"数字金融数据科学系列-Tushare实战","date":"2020-07-28T07:47:23.000Z","updated":"2020-07-28T08:24:59.578Z","comments":true,"path":"2020/07/28/数字金融数据科学系列-Tushare实战/","link":"","permalink":"http://yangxinqi.com/2020/07/28/数字金融数据科学系列-Tushare实战/","excerpt":"","text":"数据科学已经走入我们的生活近年来AI很热，大部分人看AI的角度，或者说切入点都和实际商业场景有很大的落差，走的是存粹的优化，做的很研究，有时候模型很准，但是难以付之行动，比如金融模型常常是快速的杀进快速杀出，倒跌手续费还赔上时间。大部分时候，做模型的成本太高，解决一个实际问题，需要不少预算来购买云端服务器，GPU资源来做大量运算，但是回归商业社会，不是实验室，不能重来，一切都得小心翼翼的向前，后退就意味着接受沉没成本，可能也因此给公司造成巨额损失。经历过几个项目，也和不少同事一起共事，往往不是模型问题，大部分是数据问题，数据的获取和清洗，已经训练集的准备和调优基本上占去了70%的时间，模型选型基本不是重点。所以说回来，还是先从数据科学的角度，来切入，底层基础搭好了，上层的模型才能稳固。所以我认为，数据科学的本质： 就是认清现在能够拿到多少资源，想产出多大效益。让我们一起来认识下数字金融模型下的数据科学的实际应用，本期给大家介绍Tushare数据组件。什么是TushareTushare金融大数据开放社区，免费提供各类金融数据和区块链数据，助力智能投资和创新型投资。平台特点：数据丰富： 拥有丰富的数据维度，股票，基金，期货，数字货币等行情数据，公司财务数据，基金经历等基本面数据。获取简单： SDK开发包支持语言，同时提供http restful接口，最大成都方便不同人群使用。落地方便： 提供多种数据存储方式，如Mysql,MongoDB, HDF5,CSV等，为数据获取提供了性能保证。Tushare自2014年12月起，经历了6年的发展，逐渐形成了自己的社区，与国内知名金融数据服务商，优矿，米筐，聚宽等量化平台合作，作者曾就职于通联数据，并和上海交大等高校建立合作，作为金融大数据的开源服务提供商，是一个很不错的选择。Tushare代码reviewTuShare的github上的开源代码有段时间没有更新了。本次直接review安装后的lib代码，最新版本1.2.60。github地址： https://github.com/waditu/tushare最核心的代码是 tushare/pro 目录下的 data_pro 以及 client 。 一个作为api调用的入口类，client作为api交互的client用来和服务器端收发数据用。核心代码通过requests.post 拼接post params 的方式，发送请求，返回的结果用json的方式，解析并拼接成pandas Dataframe对象，返回给上层。其他的主要是util的一些辅助类，formula.py中有一些常见的指标方法，推荐可以使用。Tushare的数字金融数据介绍tushare的数字金融数据模块，包含基础数据，行情数据，资讯数据：基础数据：全球数字货币列表， 全球数字货币交易所，交易所交易对，以及项目和交易所LOGO， 很多交易所也停止维护了。行情数据：数字货币行情， 每日市值，交易所费率，比特币每日市值，比特币每日交易量，数字货币K线资讯公告：包含了，金色财经，巴比特，比世界，交易所公告，twitter数据， twitter大V数据等。很不幸的是，大部分已经停止更新了。 最新的数据更新到6月10号，联系了维护的米哥，这块业务有个人维护，服务器费用的原因，已经暂停了部分数据的更新，缺钱来为开源的项目做贡献。 国内的开源项目，大杨也捐赠过几个，花了几千块rmb，在国内没有这样的捐助的氛围，很多开源项目很难维持下去。如何玩转TuShare开箱即用：使用pip来安装tushare:1pip install tushare安装好之后，开始些个测试来获取数据：如果注册好了，在官方网站，申请了token了之后，就可以用token来访问api获取数据了：这里申明那个交易所的那个时间段，哪个币种的数据，并将获取的数据打印出来。 最后保存成CSV文件。def test_coindayohlcv(self): token = &apos;b3a30846b80**************:89db61bf236&apos; pro = ts.pro_api(token) ex = &apos;huobi&apos; &quot;&quot;&quot; 1min 1分钟 5min 5分钟 15min 15分钟 30min 30分钟 60min 60分钟 daily 日线 week 周线 &quot;&quot;&quot; df = pro.coinbar(exchange=ex, symbol=&apos;btcusdt&apos;, freq=&apos;daily&apos;, start_date=&apos;20200301&apos;, end_date=&apos;20200728&apos;) print(df.columns) print(df) df.to_csv(&apos;{}.csv&apos;.format(ex), index=False) 结语最后，测试了下指数数据，美股数据，期货数据，外汇数据，还有港股数据，作为学习来使用，还是挺适合的，但是作为生产环境的数据源头的话，还是推荐购买，米筐，聚宽等专业的数据服务商提供的稳定的数据源,当然每年的费用6-8万也是企业才能够承受的了的，个人还是相对困难。数据的完整性还是没法保证，毕竟只有米哥一个人维护，而且通过大家捐助的方式，来收取一定的费用，来维持服务器，还有抓取程序。作为开源的一份子，tushare还是做的不错的，坚持6年也相当的不容易，数据商业化，在中国还是相当难的。 大家多给一些鼓励，如果有用，并且学到东西，可以捐助下，捐助地址： https://waditu.com/document/1?doc_id=243。为开源点赞吧。","categories":[{"name":"finance","slug":"finance","permalink":"http://yangxinqi.com/categories/finance/"}],"tags":[{"name":"数据科学 数字货币","slug":"数据科学-数字货币","permalink":"http://yangxinqi.com/tags/数据科学-数字货币/"}]},{"title":"进入数字金融行业","slug":"进入数字金融行业","date":"2020-06-22T04:54:59.000Z","updated":"2020-06-22T05:02:31.725Z","comments":true,"path":"2020/06/22/进入数字金融行业/","link":"","permalink":"http://yangxinqi.com/2020/06/22/进入数字金融行业/","excerpt":"","text":"迷茫的时候，不知道自己的未来是如何的，做下人生规划，开始找份工作，从IT行业，进入数字金融行业。以”Quantamental”为主线，开始努力学习，重新规划自己的人生。 需要补的英语，还有编程能力，还有AI能力。36岁，从新开始自己的人生。 对于编程，是热爱的，数字金融可以改变生活的状态，做自己喜欢而且能够改变生活条件的事情，是很值得的，5年规划，希望5年之后，自己不会后悔自己做的选择。 因为后悔也没用，自己选的路，在这么艰难都要走下去。数字金融我来啦！","categories":[{"name":"finance","slug":"finance","permalink":"http://yangxinqi.com/categories/finance/"}],"tags":[{"name":"数字金融","slug":"数字金融","permalink":"http://yangxinqi.com/tags/数字金融/"}]},{"title":"直面失败消除焦虑设计人生","slug":"直面失败消除焦虑设计人生","date":"2020-06-22T02:28:21.000Z","updated":"2020-06-22T04:52:43.567Z","comments":true,"path":"2020/06/22/直面失败消除焦虑设计人生/","link":"","permalink":"http://yangxinqi.com/2020/06/22/直面失败消除焦虑设计人生/","excerpt":"","text":"今天早晨，翻看朋友圈，看到lynne发到一篇读书笔记《斯坦福大学人生设计课》，看了下分析的读书笔记发现是一本蛮有见解的书，从另外的角度，来缓解焦虑，同时用简明扼要的大纲，来一步一步说明，如何克服迷茫，设计自己人生的重要性，而且给出了实际做法， 引起的读它的兴趣。读书是缓解的焦虑的好办法最近疫情影响，还有创业的行业赛代也都经历的变化，思想和心态都跌入了低谷，也背上了很大的债务， 人也变得迷茫了，尝试了做新的领域，尝试了积极主动，但是内心深处，依旧是那么的迷茫。跨过内心的徘徊，直面市场。失败没有大不了的，都是人生的一个阶段而已。","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[{"name":"人生","slug":"人生","permalink":"http://yangxinqi.com/tags/人生/"}]},{"title":"整理下简历","slug":"整理下简历","date":"2020-05-26T18:45:47.000Z","updated":"2020-05-26T19:04:57.473Z","comments":true,"path":"2020/05/27/整理下简历/","link":"","permalink":"http://yangxinqi.com/2020/05/27/整理下简历/","excerpt":"","text":"简历停下来，整理下简历，继续前行，用jekyll生成了个新的，这10年来，做了不少项目，有4个开源的，接下来把项目中用到的开源出来。体现出自己的价值，从整理简历开始，阳光的面对接下来的路。 让家里人过的幸福是最终的。xinqiyang’s resume重新进入职场，躲过危机，关注，数据，流量和交易。 让交易飞起来，才有可能实现理想。github pages 会自动执行构建，出错就不更新了。好吧，好久没更新了。","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[{"name":"简历","slug":"简历","permalink":"http://yangxinqi.com/tags/简历/"}]},{"title":"2019年终总结","slug":"2019年终总结","date":"2020-01-03T18:14:43.000Z","updated":"2020-01-03T18:21:04.586Z","comments":true,"path":"2020/01/04/2019年终总结/","link":"","permalink":"http://yangxinqi.com/2020/01/04/2019年终总结/","excerpt":"","text":"2019年，年终总结痛并快乐着的创业历程，战到最后，孤身一人，战至一兵一卒。最后：卒","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[{"name":"创业","slug":"创业","permalink":"http://yangxinqi.com/tags/创业/"}]},{"title":"低风险创业阅读笔记","slug":"低风险创业阅读笔记","date":"2019-10-25T05:52:06.000Z","updated":"2019-10-28T16:14:05.000Z","comments":true,"path":"2019/10/25/低风险创业阅读笔记/","link":"","permalink":"http://yangxinqi.com/2019/10/25/低风险创业阅读笔记/","excerpt":"序言经典名言： 千万不要卖房创业！ 千万不要卖房创业！ 千万不要卖房创业！实践名言： 创业可能亏掉一套房！创业可能亏掉一套房！创业可能亏掉一套房！读书笔记创业的初衷，你到底是为了什么？做企业最重要的是现金流，而不是净资产。从最本质的肾上腺素粉笔，到感受到爱，善意拥抱世界，拥抱创业的过程。出发点和初衷，带着爱与希望，而不是为了金钱，往往初衷不对会欲速不达，对于下属严苛，失去很多。性格好的人，结果不会坏到哪里去。","text":"序言经典名言： 千万不要卖房创业！ 千万不要卖房创业！ 千万不要卖房创业！实践名言： 创业可能亏掉一套房！创业可能亏掉一套房！创业可能亏掉一套房！读书笔记创业的初衷，你到底是为了什么？做企业最重要的是现金流，而不是净资产。从最本质的肾上腺素粉笔，到感受到爱，善意拥抱世界，拥抱创业的过程。出发点和初衷，带着爱与希望，而不是为了金钱，往往初衷不对会欲速不达，对于下属严苛，失去很多。性格好的人，结果不会坏到哪里去。创业实践中优雅的解决一个社会问题，才能影响寻常百姓的日常生活。正确的时间，正确的姿势解决一个社会问题，是对的事情，也要天时，地利，人和。创业一个是一件令人愉悦的事情， 花时间工作，然后剩下的时间陪孩子和家人。 最完美的创业模式，打造个人IP，同时还能够获得收入，这个过程是互利互惠的。克服心理问题，把创业视为人生的修炼。从用户抱怨的中，发现低风险创业的机会， 身边的人如何抱怨的，找到真正的需求点，然后着手解决。做乙方的生意模式非常危险（外包，咨询），当你江郎才尽的那天，就是公司倒闭的日子。痛点： 挖掘小数据满足用户需求产品就是小数据加上一个好的用户体验的呈现， 大部分只是改变产品包装，而不是改变产品。洞察的力量，进入实际场景，观察用户同时能够给出解决方案。忘掉你的创始人身份，开始体验产品，作为第三个灵感来源。 亲自试用自己的产品，像小白一样体验产品。把产品做简单。找到宏大的变革目标MTP， 找到目标市场足够大，存在问题，存在变革，解决的空间。我的MTP是什么？ 需要详细的描述出来。在客户最痛的点上突破，痛点到产品的一见钟情。识别真痛点和假痛点，客户真的有购买动机，能够在客户口渴的时候递出水，递给他的是半瓶救命水。没有秘密是创业者最大的风险，核心竞争力在哪里？铁杆粉丝，1000个铁杆，拉起你的产品，用户是创业者的衣食父母，也是你的力量之源。超越竞争的“10倍好”原则，如何才能拥有10倍的增长。秘密是一个慢慢积累的过程，积累一批核心用户，有了口碑。时间是最需要的东西，市场不会等待你和你的企业壮大，你只能自己真去时间，孕育出秘密之花。一切没有找对秘密的创业都是谋财害命。 谋投资人，创始人的才，害员工的命。验证商业秘密最好的方法是卖而不是问。能够让客户带来客户的销售效果，才能让产品的销售持续增长。足够价值的服务是会尖叫的。打造最小化可行性的产品，幸苦做出来的产品没有人用，悲剧了。 得不到客户认可，才是创业公司最不该犯的错误。好的用户体验，最小化，可行性。 少成本，又好用。融资需有度，钱不是越多越好。 在发现商业秘密的过程中，一定要把现金流放在最重要的位置。正向现金流，不靠融资续命。有不断流进来的现金，让自己的公司尽可能处于盈利状态。反脆弱的结构设计，人和创业秘密，商业节奏和团队管理手段，离开特定环境和北京，都难以复制。所谓反脆弱，其实就是如何应对黑天鹅时间，从随时可能发生的 不确定性中受益。人类总是过度相信经验，而不知道黑天鹅事件出现一次就足以颠覆一切。 而意外的必然性，一定会发生。黑天鹅事件，带有巨大的冲击性，会产生极端后果。发生后，可解释可预测。创业的脆弱性越强，风险也越来越大。具备反脆弱的能力，不等于坚强不屈，在必然出现的不确定风险发生时保全自我，还能让其变得更好，更有力量。合作让双方都具备反脆弱能力，在不确定中，找到生存点和发展点。设计反脆弱的商业结构，成本有底线，收益无上限。找到问题，设计一套反脆弱的模型，IP生意，需要看到本质。找到“非对称交易”的机会， 这个世界是曲线的。 损失和收益并不完全对应。创业者可以不断试错，不断调整，以期实现收益最大化和风险最小化。固定资产不产生任何收益，靠亏损维持不是长久之计。创业需要情怀，员工有匠人精神。 情怀，热爱，真诚，专注。创业最痛苦的事，莫过于只把事业当作谋生的工具。没有经历过痛苦，不懂得欢乐。情怀的价值所在，人要经历痛苦才明白。配置你的“创业杠铃”， 好的企业家不是善于冒风险，而是善于控制风险。你在一个领域安全，另外一个领域才能创新。修炼“君子不器”。让你成为全方位，多向度的人。不能够一条路走到黑，要有选择权。只要我们能够在内容层面不断精进突破，就不担心某一天会遭遇不确定性。通过思维方式的转变，扩大自己的生意的选择空间，让自己的风险发生时，有可以选择杠铃的另一端。大前提保证自己的安全，成功最好，不成功也不会伤经动骨。能力陷阱和资源陷阱，先看自己的能力和资源做什么，而不是设计一套反脆弱的商业结构。赋能生物态团队，创业是孤独而寒冷的路，会渐渐失去热情而难以持久，容易迷失。需要“群智涌现，彼此协同”创业团队是复杂体系，不能机械化管理，需要打造应对不确定性的敏捷团队。 需要为社会做贡献，不断成长。 要善待一起的兄弟，也不能过于安稳。重新定义成功，成功的思维模式，倡导终生成长。 能够守住底线，让员工犯错误，能够一起承担错误。建员工迟早会离开团队，离开才是最大的不稳定。有些创业者格局不够大，从气量就可以看出来。创业过程中，核心员工，兼职的千万不能要，三心二意的坚决清理。突产品十万人说不错，不如一百人尖叫。 优质的产品，偏向于营销推广。客户只会给你一次机会，学会珍惜自己的品牌。不着急打广告和买流量。产品重要，用户才会分享。让客户为你带来新的客户。让用户主动分享，专业化，简单化，情绪化，可视化，故事化。广告是必须做的，广告要持续，定下来不能经常变。唤醒大众情绪，才能被大量传播。用故事打败只是的诅咒， 将一个好的故事，好想法和好故事，好IP才行。学会用幂次法则思考，线性思想被幂次法则取代。 头部公司带来偏好链接，形成马太效应。 想法流，实现指数型增长。突运营让边际成本为零的运营方法，增加一个用户所需要支付的成本，决定创业是否成功的关键。内容和程序，生产的成本是一样的， 可以卖的人越来越多。只运营信息，杜绝将大部分精力用于维护用户和商家的平台系统，边际成本自然能够大幅降低。学会撬动资源刚刚，用梦想感召他人，MTP，宏大的变革目标，用你的梦想去感召更多的人，一起实践这个梦想。对于团队培养2个接班人。找到指数型增长的关键节点，列出工作流，要点，注意事项。 清单管理时间，找出关键点。手里有收入更好的更从容的解决问题，提高用户体验，找代理商。 在全球范围内找最合适的代理商。二周一个关键点，找到方向有实际结果。保增长搭建跨部门的增长小组，增长这件事人不能多。只有增长，最重要只有增长才能创造奇迹下2周多目标，看这周的实际数据企业的下一个增长方向应该取决于数据，它决定了你该做什么事，不该做什么事。让增长小组进行实验，监控，反馈。 6个角色，增长负责人，产品经理，工程师，营销专员，数据分析师和设计师。 获得支持，多实验，高效沟通。天下武功，唯快不破。唯一限制我们的是我们的想象力。最后做最好的自己，终生成长，创业也许是一个过程，也是会持续一生，但是 勿忘初心，用爱前行。 我错了，我改正。 樊登读书真心很不错，强烈推荐下。 微信读书，每天的时间应该都给他。","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[{"name":"创业","slug":"创业","permalink":"http://yangxinqi.com/tags/创业/"}]},{"title":"践行时间管理","slug":"践行时间管理","date":"2019-10-21T02:28:55.000Z","updated":"2019-10-28T16:13:52.000Z","comments":true,"path":"2019/10/21/践行时间管理/","link":"","permalink":"http://yangxinqi.com/2019/10/21/践行时间管理/","excerpt":"回归经历了近2年的全力创业历程，发现自己欠缺的太多太多。从本质上来讲，是自己的心态以及具体的执行层面，很多事情的抉择很容易受到心态的干扰。 做事情欠缺全盘考虑。回到内心初衷， 进行深刻的反省。先从时间管理开始，忙是一种状态，一直忙碌好几年，遵循着不好的时间分配原则，导致效率低下，还有花在某个点上的时间太多，导致面上整理出现不协调。 买了微信读书的会员，不知不觉，以及收藏了近300本书，认真的看着这些书，为自己充充电，才能继续前行。​","text":"回归经历了近2年的全力创业历程，发现自己欠缺的太多太多。从本质上来讲，是自己的心态以及具体的执行层面，很多事情的抉择很容易受到心态的干扰。 做事情欠缺全盘考虑。回到内心初衷， 进行深刻的反省。先从时间管理开始，忙是一种状态，一直忙碌好几年，遵循着不好的时间分配原则，导致效率低下，还有花在某个点上的时间太多，导致面上整理出现不协调。 买了微信读书的会员，不知不觉，以及收藏了近300本书，认真的看着这些书，为自己充充电，才能继续前行。​ 时间管理和生活态度好的经验别人告诉你，但是你自己不实践，没有意义。时间对于每个人是一样的， 其多少是效率问题，更关乎自己的生活态度。一些不好的例子残酷错误： 不整理。解决方法： 整理东西，尽量少买，丢掉不需要的。 各种购物软件，淘宝，京东，尽量少打开，还有小红书。残酷错误：拖来拖去，事情都在那里，只多不少解决方法： 拖延因为没有开始，开始起来就好了。 行动吧。 马上行动，马上行动，马上行动。残酷错误： 承若的大事情，不能善始善终解决方法： 大事情分解成小事情，身体力行。 行动行动，先把小事情做好。残酷错误： 决策遇上选择恐惧症解决方法： 每天晚上列出明天应该必须做的5件最重要的事情。残酷错误： 很多待办TODO列表解决方法： 把待办变成必办，其他的事情就会迎刃而解。残酷错误： 各种干扰以及时间顺序不当解决方法： 有些事情说不，整理生活碎片，想干扰说不， 不给干扰开口的机会。残酷错误： 忙得焦头烂额，嘴上还在说好好好解决方法： 不经常说不，问题很严重， 不管是谁的拜托，应该权衡之后在去做。残酷错误： 网络世界里经常欲罢不能解决方法： 离开位置，离开电脑，说不，网络上的事情，尽量少打开各类必须软件。 特别是 微信，微博，twitter之类的，以及各种的视频软件。 整理自己的电脑及手机，把消耗自己时间的APP全部干掉，电脑上的不用的统统卸载。残酷错误： 做了很多低于自己时间估值的事情解决方法： 事情可不可以分出去给其他人做，低于自己时间价值的事情，坚决不做。残酷错误： 开会花太多的时间解决方法： 小会5分钟， 大会30-45分钟，切记不要超过45分钟。残酷错误： 大部分时间在工作上，在客户那边解决方法： 留时间给自己以及家人，这个世界安排第一优先，这样你才能做的更好。残酷错误： 没有陪孩子，教育的时间太少解决方法： 和家人和孩子一起用早餐和晚餐，具体询问一些具体的事情，学校还有朋友啊，相互问候，陪孩子玩游戏，单独带他们出去玩， 给他们分配清单培养他们独立购买的能力。 星期天一家人聚在床上说话，增加家庭温馨感。残酷错误： 好久没有一家人旅行了解决方法： 规划一个假期，提前规划好，不要因为公事而影响一家人的出游放松。 提早计划。残酷错误： 没有在理财上花时间解决方法： 定期一个月，一个季度，半年，一年，对家庭财务进行整理，列出花费，到年末了需要进行年末调整了。残酷错误： 没有花时间在锻炼身体上解决方法： 看着自己的大肚子，每天锻炼坚持10分钟，比如平板撑，还有做收肚子的5组运动，先锻炼起来，去掉大肚子。残酷错误： 没有给自己留时间解决方法： 自我日，关键日，事物日要分清，这样才能规划好，自我日最优先，先把自己的时间安排好，才能够做好关键和事物安排。 聚集5种最大收益的活动，每天必须完成5种活动。残酷错误： 思想没有升级解决方案： 对自己的细节，行为，举止，外观气质等没有很好的关注。 需要做到 少即是多， 倾听少说，不要乱买了， 特别是那些便宜的所谓性价比高的东西，必须买顶配，而且尽量少买。总结需要多花时间，看书，总结，践行自己的修改，类似程序写了后的review和打patch是一样的。 人需要打补丁，需要不断的循序渐进的优化自己的行为，提高自己的气质的，最基本的是做好自己的时间安排，将大部分的时间花在自己有益的事情上面。 对自己好了，只有自己好了，才能够带动其他人，好起来。","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/tags/other/"}]},{"title":"一年的产出","slug":"一年的产出","date":"2019-08-02T06:51:49.000Z","updated":"2019-10-28T16:13:30.000Z","comments":true,"path":"2019/08/02/一年的产出/","link":"","permalink":"http://yangxinqi.com/2019/08/02/一年的产出/","excerpt":"​ 一年积累下来23个项目，一年下来，忙活代码行数，超过10w+。 涵盖了数据库， app的， 后端模块， 发布模块，以及前端，还有网站，部署等等。使用了包含java,python,php,js,sh,go, sodility 共计7种语言。产品产品发布后，提供给用户使用，接下来做好定价后，开始买卖吧。产品需要市场的体验，才行的。在国内有各种卖法，如何让用户能够更容易的找到我们，还是很关键的。","text":"​ 一年积累下来23个项目，一年下来，忙活代码行数，超过10w+。 涵盖了数据库， app的， 后端模块， 发布模块，以及前端，还有网站，部署等等。使用了包含java,python,php,js,sh,go, sodility 共计7种语言。产品产品发布后，提供给用户使用，接下来做好定价后，开始买卖吧。产品需要市场的体验，才行的。在国内有各种卖法，如何让用户能够更容易的找到我们，还是很关键的。拥抱开源接下来，还是做一个开源的项目，让大家可以用的很happy，让大家能够放心，这样的话。接下来我们的项目 https://github.com/coinphd 项目都在这里，欢迎大家参观。拥抱区块链拥抱区块链，在区块链上，做自己的应用，服务市场，服务客户。这个才是我们应该做的，这样的话，成本可以减少下来，但是我们的产品，能够得到大家的认同，这样才能够活下来，走出去。技术成就梦想开发和运营集合起来，ansible很好用，docker也很好用，用技术实现梦想，才是最近这个阶段应该做的事情的。","categories":[{"name":"devops","slug":"devops","permalink":"http://yangxinqi.com/categories/devops/"}],"tags":[{"name":"devops","slug":"devops","permalink":"http://yangxinqi.com/tags/devops/"}]},{"title":"创业一周年快乐","slug":"记回国创业的一年","date":"2019-08-02T05:38:33.000Z","updated":"2019-10-28T16:13:44.000Z","comments":true,"path":"2019/08/02/记回国创业的一年/","link":"","permalink":"http://yangxinqi.com/2019/08/02/记回国创业的一年/","excerpt":"​一周年快乐2019年8月，距离去年回国创业已经整整一年了，一年里，时局变迁，做一个流水账的记录。 创业犹如踩坑，经历过，才知道，原来这么小的坑，有这么大，足以吞噬，在让你浴火重生。帮助过的人，应该感恩，坑过的人，依旧应该感恩。​","text":"​一周年快乐2019年8月，距离去年回国创业已经整整一年了，一年里，时局变迁，做一个流水账的记录。 创业犹如踩坑，经历过，才知道，原来这么小的坑，有这么大，足以吞噬，在让你浴火重生。帮助过的人，应该感恩，坑过的人，依旧应该感恩。​ 回到原点也许开始就是错的，那接下来不管怎么做都是错的。起点的配置已经决定了未来的结局。不能去撑及时止损，受用一生，当一个团队，没有斗志，那么应该选择重来，而不应该撑。 可以的人，可以的事，自然而然，当你去硬撑的时候，未必有好的结果，反而会带来更多的伤害，不管是金钱上，还是精神上的。 闻到坏味道，就应该立即处理，OUT出团队，这个是最最关键的。孤独感当团队没有人的时候，应该控制好节奏，就算在孤独，也应该一步一步，不能忽视指标，一切以指标论英雄，才是最好的。 不管在孤独，也不应该失去心智，创业从来都是孤独的，很多时候，悲欢亦不可与人分享，在亲密的团队都是如此。 作为创始人，应该坚持走自己的路。指标指标指标指标，自己引以为要的 数据，流量，交易。 还是一直停留在数据上。数据： 有用的数据，高质量的内容， 可以销售的服务，都算。流量： 每天多少pv，多少uv，都在哪里，跑不掉的，一切以实际的数据说话，都在这边。交易： 每天多少笔交易。 实际利润率多少，成单多少，未成单多少。必须严格执行。 一切必须严格的执行。 对团队的懒散，是对自己最大的伤害。 所以一切回归初心。责任感对投资人负责，也是对自己家里人负责。 减负之后，感觉好多了。没有那么多的负担，不用每天起来寻思着，今天公司花了多少钱，还有哪些事情没有做，还需要做哪些事情？网红思考现在的网红经济， 是一个很新颖的领域，一个小团队，发挥自己的能动性，带来不错的收入。 这里的网红，不单单指的是现在所谓的直播网红，是个泛指。其实通过网络的个性活动，还是能够带来不少流量，这些流量和这些粉丝还是可以变现的。 走小团队的路，在现在资本惨淡的环境下，还是很切合实际的。动动笔头最近一年，一直在写代码，不断的填坑，不断的填坑，把坑都处理完后。 还是多输出，可以多些一些内容，这点其实很关键。 输出就是分享，能够和很多人，产生共鸣的同时，也能够提高自己。时间留给自己和家人这一年，最应该说对不起的就是家里人， 一个人在国内，其实现在的状态和之前，还是发生了很大的变化的。 如何抽出更多的时间，需要养成一个习惯。回到原点重新开始如果还有一次机会摆在你面前，你会如何抉择呢。也许还是和现在一样吧。不过避免填坑了，填了这么多的坑，应该变的更果断，更现实，这样才行。人生追求是什么家人健健康康，平平安安，我也能够陪伴在他们左右，现在这样过程，应该只是短暂的。 5年一闪而过，人生亦无几个5年。 其实走出来，简简单单就是福。 否极泰来，终其一生的追求，到最后，其实发现，简单就是美好。END","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/tags/other/"}]},{"title":"清明时节的回忆","slug":"清明时节的回忆","date":"2019-04-05T13:17:54.000Z","updated":"2019-04-06T07:03:33.000Z","comments":true,"path":"2019/04/05/清明时节的回忆/","link":"","permalink":"http://yangxinqi.com/2019/04/05/清明时节的回忆/","excerpt":"","text":"清明时节的回忆思念的日子，祭！今天许久没聊的好哥们，好兄弟，晒娃了， 刚刚到北京的时候，备受他的照顾，聊及人生选择，一向如此。聊到感触最深的，当遇到抉择的时候，总是选择出问题，导致没搭上好的车。BAT之间选择，总是看的比较近，没有着眼于潜在，对于未来发展的预估和判断都是有问题的。行业选择及跟对人行业的选择，程序员是没错的，在外人看来，高收入，在的公司也挺好。 但是在跟对人这个基础上，看的还是很不寻常的，提早跟对人，比坚持下来，然后就发达的，作为公司股东的大有人在。 小米早进去的人，现在还在位置上的，做的好的，大有人在，就是这个道理。创业一种自虐的选择当机会错过， 没有跟对人，也没有赶上大环境，出来博一把的心态，这就是创业。今年的创业环境要求很不一样，不比前2-3年的创投蜂拥而上，不比之前的宽松环境，现在还是需要靠谱的数据来支撑。清明当觉醒创业公司，也同样存在生死生命线，年后很多公司和组织退出这个行业，区块链行业也从热门行业到现在的云淡风轻，而且还备受歧视。 当公司只有半年可以活的时候，是否拼尽全力继续活下来，还是说放弃抵抗，岁月静好的等着？","categories":[],"tags":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/tags/other/"}]},{"title":"2018年年终总结主题活下去","slug":"2018年年终总结主题活下去","date":"2018-12-28T07:19:19.000Z","updated":"2018-12-28T07:28:35.000Z","comments":true,"path":"2018/12/28/2018年年终总结主题活下去/","link":"","permalink":"http://yangxinqi.com/2018/12/28/2018年年终总结主题活下去/","excerpt":"","text":"2018年 年终总结 主题 活下去2018年的最后一个工作日，回顾下整年的发展，一切过往历历在目，在梳理下。展望20192019年，小目标 500万 人民币营收结语一切都是拼出来的，爱拼才会赢。","categories":[],"tags":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/tags/other/"}]},{"title":"入行区块链金融","slug":"入行区块链金融","date":"2018-12-02T15:20:32.000Z","updated":"2018-12-02T15:35:10.000Z","comments":true,"path":"2018/12/03/入行区块链金融/","link":"","permalink":"http://yangxinqi.com/2018/12/03/入行区块链金融/","excerpt":"","text":"距离上一篇博文，已经过去整整10个月之多了。从踌躇的观望，到ALL IN区块链，到现在Lead公司杀入区块链金融行业，转眼又是12个月，一年即将过去，内心的不安和焦虑感与日俱增。 更是看到龙哥团队，所有的成员都在著书写博，我们不能落后。区块链的未来是什么样的？未来是什么样的，现在还是看不到，从ICO,STO的概念的突起，到近期的股票金融类专业人士，携大额资金杀入这一领域，传统的区块链老人，与之形成较大的对比，虽然现在这一领域，市场在逐渐萎靡，市值整体在减小，除了传统的BTC（以及衍生出来的BCHABC，BCHSV）以及有实际应用产品的Ripple，中国人市场主推的ETH，EOS，在最近的几个月，市值缩水更严重。 走出中国放眼世界，看区块链在各个国家的发展情况，整体来看，BTC的需求还是依然存在，但是BTC对整个区块链技术的发展，还是有推动作用的。整体来看看好区块链金融的发展。个人资产管理及企业机构个人资产管理，还是没有一个很好的工具来实际的做到这一点，从最早的个人资金记账，到现在支付宝及各种P2P理财公司，用户很难实际掌握自己的资产，以及实现资产的保值。企业机构在传统的领域转型过来，针对全球的市场的数量增加，也没有很成熟的一套机制来保障资产的安全，以及能够套用现在其他市场中的工具来解决管理的问题。这块是一个很好的点。结语先说这2点，最近需要更勤奋了。","categories":[],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"http://yangxinqi.com/tags/blockchain/"}]},{"title":"区块链数据分析之保存币安历史数据","slug":"区块链数据分析之保存币安历史数据","date":"2018-02-06T01:29:25.000Z","updated":"2018-02-06T06:10:48.000Z","comments":true,"path":"2018/02/06/区块链数据分析之保存币安历史数据/","link":"","permalink":"http://yangxinqi.com/2018/02/06/区块链数据分析之保存币安历史数据/","excerpt":"最近币圈大跌，作为一棵吊在高处的韭菜，还是觉得好好的做开发比跟风靠谱多了，遂静下心来，好好的写点文章，做点数据分析，抓取进阶下。接触区块链其实在三年前，一个朋友就提醒我们多关注区块链，那个时候的我们还是少不更事的认为那个虚的东西又撒好玩的，到现在回首看，眼界比技能和运气要重要得多。做人没有好的眼光，上不去的，还是捡起来好好的分析下区块链技术，后续会多些一些。言归正传，最近在分析各个交易所的数据，对接了几个交易所（bitflyer， coincheck， binance，btcbox）后续在对接一些其他的。首先作为技术出身，还是好好的做数据分析吧，先爬一些数据下来，就到处找相关的接口文档，然后通过python来把数据抓下来。这块就需要大家提供的访问api，有很多人写了交易所第三方的访问api，发布在github上，我们就使用这些api来访问以获取数据。看了好几篇文章，第一篇先给澳大利亚的一个大叔级高手打广告，翻译下他的文章，这个哥们写了好几个交易所的获取客户端。原文链接： https://sammchardy.github.io/binance/2018/01/08/historical-data-download-binance.html","text":"最近币圈大跌，作为一棵吊在高处的韭菜，还是觉得好好的做开发比跟风靠谱多了，遂静下心来，好好的写点文章，做点数据分析，抓取进阶下。接触区块链其实在三年前，一个朋友就提醒我们多关注区块链，那个时候的我们还是少不更事的认为那个虚的东西又撒好玩的，到现在回首看，眼界比技能和运气要重要得多。做人没有好的眼光，上不去的，还是捡起来好好的分析下区块链技术，后续会多些一些。言归正传，最近在分析各个交易所的数据，对接了几个交易所（bitflyer， coincheck， binance，btcbox）后续在对接一些其他的。首先作为技术出身，还是好好的做数据分析吧，先爬一些数据下来，就到处找相关的接口文档，然后通过python来把数据抓下来。这块就需要大家提供的访问api，有很多人写了交易所第三方的访问api，发布在github上，我们就使用这些api来访问以获取数据。看了好几篇文章，第一篇先给澳大利亚的一个大叔级高手打广告，翻译下他的文章，这个哥们写了好几个交易所的获取客户端。原文链接： https://sammchardy.github.io/binance/2018/01/08/historical-data-download-binance.html正文任何交易策略的基础都是有一个好的回测方案，如果你没有数据，就没法回测，数据还是很重要的。在这篇文章中，我将详细描述通过Binance API在指定时间范围内下载和保存币安的历史K线数据。这个例子不需要有币安的账户，直接访问公开的API即可。首先需要处理时间格式因为币安服务器只接受毫秒级别的时间戳的时间段，所以需要将工作日时间转换为毫秒时间戳。本次使用强大的python来进行处理，安装dateparser包。命令如下：1pip install dateparser我们可以得写个函数将日期字符串直接转换成毫秒格式。例子如下：123print(date_to_milliseconds(\"January 01, 2018\"))print(date_to_milliseconds(\"11 hours ago UTC\"))print(date_to_milliseconds(\"now UTC\"))获取币安的K线数据现在我们希望通过 get_klines API来获取实际的交易量数据。先看下接口参数：12345symbol - e.g ETHBTC 币种数据interval - one of (1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M) 时间范围limit - max 500 限制条数startTime - milliseconds 开始时间 单位毫秒endTime - milliseconds 结束时间 单位毫秒因为一次最多取500条，如果时间范围比较大，我们得循环获取。返回结果格式：1234567891011121314[ 1499040000000, # Open time \"0.01634790\", # Open \"0.80000000\", # High \"0.01575800\", # Low \"0.01577100\", # Close \"148976.11427815\", # Volume 1499644799999, # Close time \"2434.19055334\", # Quote asset volume 308, # Number of trades \"1756.87402397\", # Taker buy base asset volume \"28.46694368\", # Taker buy quote asset volume \"17928899.62484339\" # Ignore ]我们把返回的结果都存储起来，有多少存多少。币安时间间隔intervals参数中的intervals是一个字符串，一次请求只能是在某个范围内，一次限制是500，所以需要获取较长时间段数据的话，需要对时间间隔进行毫秒转换。将API中设定的时间，转换成毫秒， 例子如下：12345from binance.client import Clientprint(interval_to_milliseconds(Client.KLINE_INTERVAL_1MINUTE))print(interval_to_milliseconds(Client.KLINE_INTERVAL_30MINUTE))print(interval_to_milliseconds(KLINE_INTERVAL_1WEEK))获取K线数据准备好了之后，我们开始写方法来获取历史数据。 我们通过时间范围和intervals间隔参数很容易的获取。例子如下：12345678910from binance.client import Client# fetch 1 minute klines for the last day up until nowklines = get_historical_klines(\"BNBBTC\", Client.KLINE_INTERVAL_1MINUTE, \"1 day ago UTC\")# fetch 30 minute klines for the last month of 2017klines = get_historical_klines(\"ETHBTC\", Client.KLINE_INTERVAL_30MINUTE, \"1 Dec, 2017\", \"1 Jan, 2018\")# fetch weekly klines since it listedklines = get_historical_klines(\"NEOBTC\", KLINE_INTERVAL_1WEEK, \"1 Jan, 2017\")完整的代码可以从python-binance项目的例子中获取，链接： examples folder保存到文件获取到的数据后存到文件以方便后面使用。代码如下：123456789101112131415161718192021import jsonfrom binance.client import Clientsymbol = \"ETHBTC\"start = \"1 Dec, 2017\"end = \"1 Jan, 2018\"interval = Client.KLINE_INTERVAL_30MINUTEklines = get_historical_klines(symbol, interval, start, end)# open a file with filename including symbol, interval and start and end converted to millisecondswith open( \"Binance_&#123;&#125;_&#123;&#125;_&#123;&#125;-&#123;&#125;.json\".format( symbol, interval, date_to_milliseconds(start), date_to_milliseconds(end) ), 'w' # set file write mode) as f: f.write(json.dumps(klines))打赏功能这些好的方法，已经添加到python-binance方便大家使用。date_to_milliseconds 和 interval_to_milliseconds已经添加到binance.helpers中。get_historical_klines已经添加到finance.client中，直接调用即可。代码如下：123456import jsonfrom binance.client import Clientclient = Client(\"\", \"\")klines = client.get_historical_klines(\"ETHBTC\", Client.KLINE_INTERVAL_30MINUTE, \"1 Dec, 2017\", \"1 Jan, 2018\")接下来使用这些获取的数据，我们可以在后续的回测中使用。使用Kucoin交易所的用户同样使用python-kucoin 也有这些功能。后续还会写一些使用 pandas 和 TA-Lib 来进行简单的回测的文章。结语sammchardy 是一个很帅的澳洲哥们，大家可以在twitter上关注他， 作为开源的api客户端，写的也非常的便捷，对于这样有分享的精神的哥们，大家是不是给点打赏呢，他也给了Donate地址了。大家可以查看原文。我在最后也贴下全文例子的链接：save_historical_data.py 大家可以下下来实际的跑一下试试。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146import timeimport dateparserimport pytzimport jsonfrom datetime import datetimefrom binance.client import Clientdef date_to_milliseconds(date_str): \"\"\"Convert UTC date to milliseconds If using offset strings add \"UTC\" to date string e.g. \"now UTC\", \"11 hours ago UTC\" See dateparse docs for formats http://dateparser.readthedocs.io/en/latest/ :param date_str: date in readable format, i.e. \"January 01, 2018\", \"11 hours ago UTC\", \"now UTC\" :type date_str: str \"\"\" # get epoch value in UTC epoch = datetime.utcfromtimestamp(0).replace(tzinfo=pytz.utc) # parse our date string d = dateparser.parse(date_str) # if the date is not timezone aware apply UTC timezone if d.tzinfo is None or d.tzinfo.utcoffset(d) is None: d = d.replace(tzinfo=pytz.utc) # return the difference in time return int((d - epoch).total_seconds() * 1000.0)def interval_to_milliseconds(interval): \"\"\"Convert a Binance interval string to milliseconds :param interval: Binance interval string 1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w :type interval: str :return: None if unit not one of m, h, d or w None if string not in correct format int value of interval in milliseconds \"\"\" ms = None seconds_per_unit = &#123; \"m\": 60, \"h\": 60 * 60, \"d\": 24 * 60 * 60, \"w\": 7 * 24 * 60 * 60 &#125; unit = interval[-1] if unit in seconds_per_unit: try: ms = int(interval[:-1]) * seconds_per_unit[unit] * 1000 except ValueError: pass return msdef get_historical_klines(symbol, interval, start_str, end_str=None): \"\"\"Get Historical Klines from Binance See dateparse docs for valid start and end string formats http://dateparser.readthedocs.io/en/latest/ If using offset strings for dates add \"UTC\" to date string e.g. \"now UTC\", \"11 hours ago UTC\" :param symbol: Name of symbol pair e.g BNBBTC :type symbol: str :param interval: Biannce Kline interval :type interval: str :param start_str: Start date string in UTC format :type start_str: str :param end_str: optional - end date string in UTC format :type end_str: str :return: list of OHLCV values \"\"\" # create the Binance client, no need for api key client = Client(\"\", \"\") # init our list output_data = [] # setup the max limit limit = 500 # convert interval to useful value in seconds timeframe = interval_to_milliseconds(interval) # convert our date strings to milliseconds start_ts = date_to_milliseconds(start_str) # if an end time was passed convert it end_ts = None if end_str: end_ts = date_to_milliseconds(end_str) idx = 0 # it can be difficult to know when a symbol was listed on Binance so allow start time to be before list date symbol_existed = False while True: # fetch the klines from start_ts up to max 500 entries or the end_ts if set temp_data = client.get_klines( symbol=symbol, interval=interval, limit=limit, startTime=start_ts, endTime=end_ts ) # handle the case where our start date is before the symbol pair listed on Binance if not symbol_existed and len(temp_data): symbol_existed = True if symbol_existed: # append this loops data to our output data output_data += temp_data # update our start timestamp using the last value in the array and add the interval timeframe start_ts = temp_data[len(temp_data) - 1][0] + timeframe else: # it wasn't listed yet, increment our start date start_ts += timeframe idx += 1 # check if we received less than the required limit and exit the loop if len(temp_data) &lt; limit: # exit the while loop break # sleep after every 3rd call to be kind to the API if idx % 3 == 0: time.sleep(1) return output_datasymbol = \"ETHBTC\"start = \"1 Dec, 2017\"end = \"1 Jan, 2018\"interval = Client.KLINE_INTERVAL_30MINUTEklines = get_historical_klines(symbol, interval, start, end)# open a file with filename including symbol, interval and start and end converted to millisecondswith open( \"Binance_&#123;&#125;_&#123;&#125;_&#123;&#125;-&#123;&#125;.json\".format( symbol, interval, date_to_milliseconds(start), date_to_milliseconds(end) ), 'w' # set file write mode) as f: f.write(json.dumps(klines))执行例子:1python3 save_historical_data.py生成文件：1Binance_ETHBTC_30m_1512086400000-1514764800000.json返回结果例子：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100[ [ 1512086400000, \"0.04368400\", \"0.04375100\", \"0.04334200\", \"0.04366500\", \"2081.85600000\", 1512088199999, \"90.79655078\", 3904, \"976.19100000\", \"42.59074736\", \"271480.34213668\" ], [ 1512088200000, \"0.04360200\", \"0.04369900\", \"0.04325100\", \"0.04350100\", \"2420.48100000\", 1512089999999, \"105.27683806\", 2775, \"1133.24800000\", \"49.31486895\", \"271300.32546398\" ], [ 1512090000000, \"0.04350100\", \"0.04379400\", \"0.04304900\", \"0.04370500\", \"2192.51500000\", 1512091799999, \"95.48824264\", 2359, \"1029.30200000\", \"44.86783356\", \"271143.81327337\" ], [ 1512091800000, \"0.04374900\", \"0.04392000\", \"0.04361300\", \"0.04378100\", \"1482.24800000\", 1512093599999, \"64.86877196\", 2112, \"704.81600000\", \"30.85380066\", \"271394.84389969\" ], [ 1512093600000, \"0.04375800\", \"0.04424900\", \"0.04364800\", \"0.04403800\", \"2073.49800000\", 1512095399999, \"90.95341447\", 2763, \"996.44700000\", \"43.72006243\", \"271126.63134592\" ], [ 1512095400000, \"0.04400500\", \"0.04421400\", \"0.04380000\", \"0.04389900\", \"1675.47800000\", 1512097199999, \"73.62046216\", 1817, \"808.25500000\", \"35.52008528\", \"271368.11447690\" ], [ 1512097200000, \"0.04390400\", \"0.04413600\", \"0.04364200\", \"0.04400500\", \"2138.10400000\", 1512098999999, \"93.95901243\", 2260, \"1157.93700000\", \"50.88996640\", \"271143.40315253\" ]]大家可以试试，在后续回测中可以用到。如果大家遇到报错，请升级下cryptography的包，命令如下：1pip3 install -U cryptography后续我也会多些一些原创的区块链技术方面的文章。","categories":[{"name":"blockchain","slug":"blockchain","permalink":"http://yangxinqi.com/categories/blockchain/"}],"tags":[{"name":"block chain, binance, historical data","slug":"block-chain-binance-historical-data","permalink":"http://yangxinqi.com/tags/block-chain-binance-historical-data/"}]},{"title":"将blog迁移到hexo了","slug":"将blog迁移到hexo了","date":"2018-02-06T01:14:00.000Z","updated":"2018-02-06T09:53:38.000Z","comments":true,"path":"2018/02/06/将blog迁移到hexo了/","link":"","permalink":"http://yangxinqi.com/2018/02/06/将blog迁移到hexo了/","excerpt":"总是别人的好看东西总是别人的好，之前用的octopress搭建在github page上的notes，折腾了2回了，之前因为换了机器了之后，ruby的环境丢了，重新整了下。 换了下octopress的theme，然后一年才写了2-3篇，战斗力严重下降。最近一直在看不少技术者的blog，看他们写的都不错，都是使用hexo，所以查了下，hexo是重写过的，比起之前用ruby下的rake写的octopress，感觉看上去更好看一些，而且果然提供了很多的theme，感觉做的都很全也很漂亮。遂决定换到hexo了，用下来，感觉很方便，插件和风格也都很全。插件这块，看到大家加了打赏功能了，我也默默的给加上了，不知道后续会不会有人给我打赏呢，入乡随俗啊，感觉国内这块的风气这点还是比较好的。 写文章的人很多，而且知识付费的意识也起来了。","text":"总是别人的好看东西总是别人的好，之前用的octopress搭建在github page上的notes，折腾了2回了，之前因为换了机器了之后，ruby的环境丢了，重新整了下。 换了下octopress的theme，然后一年才写了2-3篇，战斗力严重下降。最近一直在看不少技术者的blog，看他们写的都不错，都是使用hexo，所以查了下，hexo是重写过的，比起之前用ruby下的rake写的octopress，感觉看上去更好看一些，而且果然提供了很多的theme，感觉做的都很全也很漂亮。遂决定换到hexo了，用下来，感觉很方便，插件和风格也都很全。插件这块，看到大家加了打赏功能了，我也默默的给加上了，不知道后续会不会有人给我打赏呢，入乡随俗啊，感觉国内这块的风气这点还是比较好的。 写文章的人很多，而且知识付费的意识也起来了。说到免费的https看到大家的个人域名都是使用https的，之前的github pages是不支持https绑定的，结果一查，发现cloudflare支持https的跳转，这块突然想到，其实他们就是拿到解析到自己的服务器，作为一个反向代理，在把后端的页面直接给返回就行，是能够实现https的，而且还是免费的，好吧，这里赞下cloudflare。美国的一些互联网公司的产品设计果然还是很赞的。复活yangxinqi.com去年忙活了一整年了，发现时间特别少，没有咋个动笔，2018也过去2个月了，今年目标每个月1-2篇文章吧。这点还是可以实现的，停下来总结总结，总比每天忙个不停要好的多。","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[{"name":"octopress, hexo, next theme","slug":"octopress-hexo-next-theme","permalink":"http://yangxinqi.com/tags/octopress-hexo-next-theme/"}]},{"title":"回顾2017","slug":"hui-gu-2017","date":"2018-02-03T14:11:27.000Z","updated":"2018-02-06T09:53:28.000Z","comments":true,"path":"2018/02/03/hui-gu-2017/","link":"","permalink":"http://yangxinqi.com/2018/02/03/hui-gu-2017/","excerpt":"回首2017年匆匆而过，回想下过去的一年，忙忙碌碌可始终还是两手空空，很充分的体会到初创公司，为之全力付出后商业模式无情的验证结果，一个公司是否能够赚钱，看结果就知道了。用几个数字概括下：开发了3个项目到上线举办了10场亿咖啡的线下活动投资了2家公司","text":"回首2017年匆匆而过，回想下过去的一年，忙忙碌碌可始终还是两手空空，很充分的体会到初创公司，为之全力付出后商业模式无情的验证结果，一个公司是否能够赚钱，看结果就知道了。用几个数字概括下：开发了3个项目到上线举办了10场亿咖啡的线下活动投资了2家公司敏捷开发实践从1月开始到6月，都在为了客户的项目，作一个工程师应该做的事情，每天加班的把客户安排的活给清理掉。转眼半年过去的很快。开发还是挺有意思的，新的敏捷模式 + 使用N多的外部服务，用极少的工程师和时间快速的实现出业务流程，这点真的体会到卢兄的这种技术管理的思想还是很值得学习的。在此感谢下卢兄。举办活动前半年活动也不少，弄了AI + 区块链的活动，吸引了不少朋友过来，也结交了很多新朋友。在日本IT这个闷的不行的地方，我们也算尽了一点点力吧。举办了10场活动，还是没有达到每月一场的目标，在这里感谢各位讲师，特别是王博士的AI基础普及课程。经历一场撕逼做为我们的客户，因为我们做了一个媒体的项目，居然过来要和我们撕逼，说我们也做了他们的行业，对于老熟人和创业者，心胸居然这么狭窄，这点让我比较难以接收，也撕逼了一场，不知道现在的项目还活着么？现在都记不起这个项目的名字了。投资一个新媒体项目为去年一起的项目启动了一个新媒体项目，投资人想打造一个类似今日头条一样的日本本地生活服务的APP，我们开发了个，但是陷入长期的没有推广的情况，体会到做一个项目容易，但是推广和坚持一个项目有多难。也体会到项目没有投入继续维持的痛苦。最终妥协了，团队成员都派遣了。做了最不想做却不得不做的事情项目失败，无力支撑公司的运转，进而把团队的兄弟们都放到现场去了。 为了维持我们也都没有办法，作为一个项目负责人，是大家的带头大哥，我也比较抱歉，对于未来如何，现在也无可知晓了。 派遣还在继续，事情还是得继续推动下去，团队散出去容易，回来相对还是挺难的。这块多亏了张总的照顾，在这里表示感谢。等的花儿都谢了的一年也没等到合伙人归来，作为一个单枪匹马的创业者，公司从多个股东干到就剩下一个，也是没有谁了。 这点现在看来还是很需要我们把事情干好的，对于一个烂摊子谁也不想出来收拾，当然对于一个没有未来感的公司，大家也都不想投入是一样的。这块我们应该如何来分清主次呢？ 孤独感和协作感很考验一个创始团队。合伙人之于家里是同等重要的。出走国内对于没有安全感的我来讲，坚持到最后也坚持不下去的情况下，选择一口饭吃成为排解公司危机的主要方式。在坚持不下去的时候，选择了冷冻，开拓新的战场，在国内AI蓬勃发展的时机，回来体验下这样紧密的加班开发的环境。 国内的公司的工作氛围和日本完全不同，经历过熟悉又陌生的工作及生活后，陷入迷茫，未来会是什么样的？其实国内之于日本没有好和不好之说，最关键的还是在一起做事情的人，国内优秀的人很多，优秀的公司也很多，其实相对于日本，竞争更为激烈，作为一个工程师需要做的事情更多。作为管理职位的人，需要发挥的更多，这块需要投入的也更多，不比自己创业付出的少，想成就一个伟大的事业，必须需要一个比较大的付出，其实如果只有一个目标，我们还是可以好好的来处理的。实战AI回国后的3个月，做了3个项目，上线1个，搁浅了2个，对于AI的初步认识以及实际使用有了一些更深入的了解。AI之于普通的企业来讲，还需要一个过程，但是降低成本提高效率这块，技术还是可以付出很多，有一定的提升空间。 在这边带的2个小朋友我也是刮目相看，这点真心的感觉不错，有些人战斗力爆棚，稍稍带下就可以发挥出来，有些人就不行了，上手很慢的说。结语一年在忙碌中匆匆而过，最对不起的还是儿子和女儿，暂时的分离只是为了将来更好的生活。2017年努力却没有什么回报，算账目是有盈余的，实际则不然，这也许就是商业的规则。作为局中人在没有退出时机的时候，剩下的只有投入，不断的投入。","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[]},{"title":"请停止无效努力","slug":"qing-ting-zhi-wu-xiao-nu-li","date":"2017-11-12T13:43:26.000Z","updated":"2018-02-06T09:53:22.000Z","comments":true,"path":"2017/11/12/qing-ting-zhi-wu-xiao-nu-li/","link":"","permalink":"http://yangxinqi.com/2017/11/12/qing-ting-zhi-wu-xiao-nu-li/","excerpt":"往往的往往，都是到最后的时间，开始做事情，几十年来依然是如此，从未改变过，为什么会这样呢？习惯吧，一个习惯的习惯，一直持续自己的各种做事方式，不尝试去改变自己，这样肯定是不行的说。休息了一天，其实呢，感触比较深的是，做公司做人都是一样，盈利的目的性太强了，这个看过去不是什么好事，前期野蛮生长是必须的，壮大之后，你可以考虑生态，考虑到大家的幸福指数，但是在一切未安定之前，很难做到这块。","text":"往往的往往，都是到最后的时间，开始做事情，几十年来依然是如此，从未改变过，为什么会这样呢？习惯吧，一个习惯的习惯，一直持续自己的各种做事方式，不尝试去改变自己，这样肯定是不行的说。休息了一天，其实呢，感触比较深的是，做公司做人都是一样，盈利的目的性太强了，这个看过去不是什么好事，前期野蛮生长是必须的，壮大之后，你可以考虑生态，考虑到大家的幸福指数，但是在一切未安定之前，很难做到这块。自我效能勤奋一直都很勤奋的，每天不浪费时间，每周也不浪费时间，每个月更是如此，各种杂事及各种开发任务，客户维系，现在静下来，好好的梳理下，其实发现，真心需要整理下，迫切需要停止掉无谓的勤奋，一直很努力，依旧很失败，这块也许是很多人的写照吧。团队找优秀的人，有优秀的人加盟，或者是一直培养，让她成长起来，这2种方式对于人，是应该如何衡量呢？人又有拼劲，又能和团队的其他人相处，又有很好的技术，又很有责任心，其实要求很多，大部分很难做到，哪怕是你的合作伙伴都是如此的说。 所以从自身的性格上来看，很难找到和你一起的付出而不图回报的人，随着年龄的增大，冲劲和抗风险的能力都在持续的下降，所以人还是很难能够一直一直的走下去，更是拼劲全力的一起走下去。所以心态上放开来，很多事情，都是可遇而不可求的，人生总是如此，好朋友和知己总是寥寥无几，能够一起奋斗的都是在少数，我不是一个好的商人，但是可以做一个好的朋友，虽然大家都是在道上，时间流逝，一切随缘。接下来，期望给自己找一个导师montor，急切需要一位人生导师，能够开导开导下，未来的方向在哪里？找一些死党，当你在怎么不行的时候，也有人能够帮助你，能够让你重新出发。财务避税及年金保险，国内的五险一金以及各种税务法务方面的事情，这块都需要特别的注意，关于公司的固定资产和固定支出，这块也需要强烈的关注下，对于初创公司来讲，房租成本和其他的成本及年金保险这块每个月需要交的都是挺多的。这块需要特别特别的注意，关注财务及正常的流水，保证正常的现金流，这块非常非常重要，这块特别要说到最推广预算方面，产品研发的水平可以控制，但是推广的成本很难控制住，所以提取做好预算是非常关键的。还有对接在线支付，当我们需要在网上的做支付方式的时候，这块尤为重要，对接上了之后，我们能够实现正向收入并使得产品可以运营起来。方向区块链，人工智能，机器学习，未来的方向是在哪里，我们需要在哪个领域内扎根，好好的运营3年，未来很快，现在的数据内容很多，我们如何来进行很好的定位及突破方向，这块非常的重要。选择一个好方向，现在如何金融领域深入，这块对我们来讲是一个很好的课题，金融领域结合人工智能及区块链技术，做一个稳定的定投产品出来。看好的方向及未来的发展，如何在方向压对上，赚到第一桶金，这块也非常的重要的说。资源先有的技术资源，各种外面已经做的很好的开源的项目及产品，我们都可以很好的用起来，虽然很多都需要另外付费的，有一些服务是能够长久使用的。能够拿到的宣传资源，合作资源，这块也是需要很好的去梳理去实现的。人脉如何认识和自己不是一个圈子的人，并把人脉维护好，需要跨界合作，现在花的时间还很少的说，这块需要强力的合作下。跨界的人脉多认识一些，下班时间，多出去聚聚喝喝酒，有自己的圈子还是得要的说，人脉圈子还是挺重要的。总结多出去走走，把时间用在对的地方，做对的决策。","categories":[{"name":"project","slug":"project","permalink":"http://yangxinqi.com/categories/project/"}],"tags":[]},{"title":"携程技术沙龙-人机智能交互AI与客服机器人-总结","slug":"xi-cheng-ji-zhu-sha-long-ren-ji-zhi-neng-jiao-hu-aiyu-ke-fu-ji-qi-ren-zong-jie","date":"2017-09-30T08:29:39.000Z","updated":"2018-02-06T06:04:18.000Z","comments":true,"path":"2017/09/30/xi-cheng-ji-zhu-sha-long-ren-ji-zhi-neng-jiao-hu-aiyu-ke-fu-ji-qi-ren-zong-jie/","link":"","permalink":"http://yangxinqi.com/2017/09/30/xi-cheng-ji-zhu-sha-long-ren-ji-zhi-neng-jiao-hu-aiyu-ke-fu-ji-qi-ren-zong-jie/","excerpt":"时间： 2017-09-23 上海 携程议题：人机智能交互AI与客服机器人PDF及录音：https://pan.baidu.com/s/1dFmzRxf 提取密码： vxxw （文件超过插入大小，放到百度网盘上了）第一讲：微软技术在客户中的应用- 微软 于辉第二讲：腾讯语音人工智能技术的应用 - 腾讯第四讲：UNIT：语言理解与交互艺术-百度孙珂这些偏广告方面，我们先给略过了，下面的三个session深入聊下。","text":"时间： 2017-09-23 上海 携程议题：人机智能交互AI与客服机器人PDF及录音：https://pan.baidu.com/s/1dFmzRxf 提取密码： vxxw （文件超过插入大小，放到百度网盘上了）第一讲：微软技术在客户中的应用- 微软 于辉第二讲：腾讯语音人工智能技术的应用 - 腾讯第四讲：UNIT：语言理解与交互艺术-百度孙珂这些偏广告方面，我们先给略过了，下面的三个session深入聊下。第三讲：携程AI平台及客服机器人-携程于磊第五讲：京东JIMI用户未来意图预测-京东邹波第六讲：深度学习在智能助理产品中的应用-来也胡一川第七讲：阿里小蜜-电商领域的智能助理技术实践-阿里陈海青总结携程：针对当前携程这边AI方面的工作，主要由公共BI部门来做，现在主要是于磊带领的部门的40-50个人的规模来做，支持携程的各大产品线。针对当前智能客服的开发进度情况现在还不太清除，实际商用到什么程度？小诗机主要用到了CNN，RNN， LSTM等各种算法，还调用了第三放的api来获取天气，季节等数据，最终通过LSTM模型来创作，这里着重提到了seq2seq和LSTM结合的方式。对于智能机器人方面，他们使用了检索 + 意图级别 + 命名实体识别 等方法结合等给出结果。 其中算法方面用到到挺多常用到算法，模块方面主要封装成对话管理，知识图谱和个性化推荐等，在上层封装成各种应用。京东：京东讲等相对比较细节一些，将他们现在做等进行了下总结，主要围绕客服咨询和问答的领域，通过清洗，聚类及特种提取，来提高准确度，他们主要用java方向的架构，spring batch还有mapreduce来做。基于用户的意图识别方面，也是用BaseLine，之后用LSTM + Attention的模式来提高预测准确率，这个方面提出率一些模型调优方面的一些经验，通过L2正则化，通过加大样本数量（100w条） ，加入Dropout机制，截断式反向传播，掩模和填令，学习率自动衰减 AdaGrad，权重初始化xavier ，优化方法 sgd/adagrad/momentum ,激活函数 softmax主要流程： 从数据源日志中– 》 分词，word2vec，去掉停用词，同义词替换，取中心词生成句子向量，聚类生成标准问题 –》 特征收集与建模 –》 建立分类模型来也：来也讲的也比较细节方面，主要是针对当前的问答进行技术的处理，从语意方向和问答，实体抽取和知识挖掘，意图识别来进行处理。 提到框架方面主要处理流程，embed (每个词或者句子映射为向量) –&gt; Encode（对一段文本对应的向量进行转换，转换时使用上下文信息，通常使用CNN，RNN –&gt; attend（从编码后的向量中提取对预测由价值的信息，输出为一个固定维度的向量）–&gt; predict（基于输入向量产出最终的预测） 。这里主要聊了下，他们的基于深度学习，完全数据驱动，无需特征工程，效果明显由于传统机器学习模型， 使用 双向LSTM + Attend + softmax 最终输出 意图识别结果，准确率达到95% ，这块有点夸张。阿里：阿里的团队比较完善，人也比较多，单单一个客服团队，就由50+的人在做这些， 而且整体系统上看过去做的时间比较就也比较全面，主要他们也是对用户对行为特征进行意图分类的预测。 他们主要结合用户行为序列与Query的意图识别分类，使用词袋 + RNN + CNN 等对文本进行embedding 然后在用DNN 2-channel 针对多标签进行分类。 他们的基于图谱与IR模型相结合的QA Bot 使用 文本预处理 + 分词处理 + 纠错， 基于 搜索召唤模块，从现有的结构化知识库中，通过语料索引构建的索引模块，检索，然后计算模块进行 相似度，情感分析，文本属性识别 等，然后组装答案，在给出回答。他们这块对于语义关系部分的自动挖掘，使用图算法来做， graph, aiml 来做意图关系及意图规则，最后生产特征， 也有通过分类，SM ,LDA2VC, cosine ,WMD 来做特征生成，这块看看由没有现成的我们可以使用的，业务这块特征抽取，目前占用了大量的人力和时间。后面他们做的，ai boost核心算法技术，主要是在 预处理和特征工程这块，句子向量，相似度计算，聚类等，通过场景及语料，对问题进行处理，而我们现在也比较关注用户回复的答案。后记整体主要了解了各大公司在AI语言处理方向及对话机器人方向，基于场景和领域下，技术，算法的使用以及处理的过程，各家公司做的粒度和广度都有差别，但是总体来看，我们能从这边看到算法及处理过程的，对于我们现在的实际进行中的项目还是有很大帮助的。","categories":[],"tags":[]},{"title":"机器学习入门","slug":"ji-qi-xue-xi-ru-men","date":"2017-07-02T15:03:55.000Z","updated":"2018-02-06T09:52:48.000Z","comments":true,"path":"2017/07/03/ji-qi-xue-xi-ru-men/","link":"","permalink":"http://yangxinqi.com/2017/07/03/ji-qi-xue-xi-ru-men/","excerpt":"AI的入门AI的概念越来越热，各大厂都在深入的使用AI技术来提高各自的业务水平，各种创业公司和团队都在使用这个技术，在东京这块也有很多的机器人公司在尝试使用这个技术来做一些新业务的尝试，自己也不能免俗的加入的AI开发者的行业。对于算法和机器学习都不精的情况下，其实面对应用场景和技术的匹配，还是很难判断，只能一步一步的跟进，从而在真正的产品中，能够把产品做出来，有实际使用才有话语权，也有投入能够把这块做的更好。机器学习的入门从AI到机器学习，其实感觉都没撒太大的区别，对于初学者来说，我们也表示下会一些CNN从而可以说明你会点机器学习吧，但是这块地算法真心的不少。移动设备机器学习的入门从图片做简单的分类，这个是现在常见的在做的部分，当然也是想在iOS和Android上使用这块地技术来做一些实践的产品。今天演示用的iOS代码在这里下载：https://github.com/xinqiyang/iOS-10-Sampler","text":"AI的入门AI的概念越来越热，各大厂都在深入的使用AI技术来提高各自的业务水平，各种创业公司和团队都在使用这个技术，在东京这块也有很多的机器人公司在尝试使用这个技术来做一些新业务的尝试，自己也不能免俗的加入的AI开发者的行业。对于算法和机器学习都不精的情况下，其实面对应用场景和技术的匹配，还是很难判断，只能一步一步的跟进，从而在真正的产品中，能够把产品做出来，有实际使用才有话语权，也有投入能够把这块做的更好。机器学习的入门从AI到机器学习，其实感觉都没撒太大的区别，对于初学者来说，我们也表示下会一些CNN从而可以说明你会点机器学习吧，但是这块地算法真心的不少。移动设备机器学习的入门从图片做简单的分类，这个是现在常见的在做的部分，当然也是想在iOS和Android上使用这块地技术来做一些实践的产品。今天演示用的iOS代码在这里下载：https://github.com/xinqiyang/iOS-10-Sampler做个PPT自己学习下投入的时间不够，只能在现在业务繁忙的情况下，多投入一些时间来吧这块事情做好。就做一个PPT做一个session，这样有自学有交流，这样能够学习到更多。下载地址：http://yangxinqi.com/images/machine_learning_in_mobile.pdf最后攒钱买机器最后还是花钱去搞了一台机器了，开始AI的模型训练之旅了。精彩在最后在接近尾声的时候，从讨论中擦出了火花，过来的周兄是移动方面的大牛，给了不少推荐，最后有乐天的任兄给我们聊了下机器学习在金融方面的应用，顿时大家兴趣备至啊，终于有和钱相关的话题了，虽然现在还是半自动的，虽然现在AI还只是能给出建议，但是在很多的方面已经能够直接商用了，说明这个方向在未来的2-3年内应该还是很热门的。","categories":[{"name":"ai","slug":"ai","permalink":"http://yangxinqi.com/categories/ai/"}],"tags":[]},{"title":"三年之后","slug":"san-nian-zhi-hou","date":"2017-04-30T15:36:11.000Z","updated":"2018-02-06T09:52:52.000Z","comments":true,"path":"2017/05/01/san-nian-zhi-hou/","link":"","permalink":"http://yangxinqi.com/2017/05/01/san-nian-zhi-hou/","excerpt":"","text":"三年之后“三年后又三年，就快10年了，老大!” — 这个没记错的话，应该是无间道里面梁朝伟饰演的陈永仁说的。今天是从正式创立公司满三年的子，三年前的今天决心了出来做一个属于自己的公司，有一个梦想，想弯道超车，但是就现在的结果来看，很多时候都未能如愿。商场上的挣扎，和作为程序员本身的基本追求，又有着很大的冲突。庆幸我们现在还活着，庆幸现在还没有放弃。虽然现在大部分的时间不属于自己，但是整体拼杀过来，有一个小小的团队，还是有可能的。尽人事，听天命，掌握好时间，做好自己该做的事情。下一个三年，还在等着，希望十年后的今天，在来回首看，会感谢现在努力拼搏的自己。","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[]},{"title":"时间管理和情绪管理","slug":"shi-jian-guan-li-he-qing-xu-guan-li","date":"2017-03-17T03:33:42.000Z","updated":"2018-02-06T09:53:00.000Z","comments":true,"path":"2017/03/17/shi-jian-guan-li-he-qing-xu-guan-li/","link":"","permalink":"http://yangxinqi.com/2017/03/17/shi-jian-guan-li-he-qing-xu-guan-li/","excerpt":"好死不如赖活着活着讲究的是一种境界，死了一切就扯淡了。有的时候发现，有品节的去死不如好好的活着，其实很多时候大中华民族的气节也是这样的，所以面对现在的种种历史问题，新一代的人总是一直的去回避，我们都躲的远远的这样就能规避掉这个问题了。想要赖活着，这样的状态下，面对生活，必须有自己的时间管理和情绪管理的心态，不然还是做不到的，人改变自己的劣根性是很难的，我们自己改下自己的行为习惯就更难了。自创业以来，自己就像一个陀螺一样，转的停不下来，N个项目，N个ticket需要去处理，可是时间总是那么那么的平凡，就是这么的24小时。","text":"好死不如赖活着活着讲究的是一种境界，死了一切就扯淡了。有的时候发现，有品节的去死不如好好的活着，其实很多时候大中华民族的气节也是这样的，所以面对现在的种种历史问题，新一代的人总是一直的去回避，我们都躲的远远的这样就能规避掉这个问题了。想要赖活着，这样的状态下，面对生活，必须有自己的时间管理和情绪管理的心态，不然还是做不到的，人改变自己的劣根性是很难的，我们自己改下自己的行为习惯就更难了。自创业以来，自己就像一个陀螺一样，转的停不下来，N个项目，N个ticket需要去处理，可是时间总是那么那么的平凡，就是这么的24小时。改变应该从时间管理开始时间及事情的优先级总是这样的，然后协调的好不好，其实重在自己的心态，活都是那么多，愉快的干完和痛苦的干完，心态是完全不一样的，就送你拼尽全力，好多的活还是那些，我们很难能够都面面俱到的处理好。到这个月过完，创业三周年即将到来，一直没有时间回首复盘下这3年来自己走过的这一切。看到朋友们的生活，其实3年就可以变很多，现在没有变的是，3年来一直维持着自己的公司，走走停停，好歹还活着吧。 所以解放是很关键的，搞来搞去，不能老是在高压的状态下，面对时间，还有外界的压力，应该用自己的节奏去控制它，而不应该是被别人所控制。1.周末的休息是必须的，平日的加班是要有效率的​ 看到很多团队，周末一直在加班，一直在高压的状态，而且持续好几个月，而且经常出现，这个创业团队里面也比较常见，体会过来感觉真的挺没有必要的，技能重在积累，做为一个商业模式必须考虑盈利。 所以留给自己一个充裕的时间，能更有效的来思考。在加上现在有了孩子，更需要多抽时间来陪他了。​ 平日的加班，其实多数情况下是无效率的，经历下来好多时候都没有啥用，项目在最后的关头，才开始努力的去面对之前未完成的功能，靠加人和加班都是于事无补的感觉，现在来看还是比较难以见效。 所以加班不可避免的要解决问题的情况下，还不如第二天清醒的来快速解决。2. 团队管理上时间的分配和协调​ 团队开发，在最后都要避免加班，用一个已经磨合好的团队，做事情自然会快一些，用google日历来管理，大家的每个工作时间，精确到半个小时，效率就自然能上来的了，其次是给大家一些反馈，对于现在存在的问题能够尽快的沟通，当面沟通比聊天来的好，自然就能有效率了。情绪管理不淡定的情况下如何淡定自己挖的坑自己填，做错的事情，下次不要在犯错，现在的情况下大家都是这么来处理的。 但是在好多达不到自己的标准下，还是很难的在这个问题上达成一致。找个不伤害人的方式发泄吧。还是得发泄掉就好了。当心情极度不佳的时候，如何控制好情绪很关键！无法两全的情况下，只能选择一个了，做好自己认为的最重要的一个很关键，为自己活一回，还是想为自己而站，这也是一直以来自己的理想。想想自己，想想自己要做的就好了。扯到底，扯好了，好吧，扯好了，开始干活去！","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[]},{"title":"xinqiyang复活","slug":"xinqiyangfu-huo","date":"2017-02-20T10:47:09.000Z","updated":"2018-02-06T09:53:04.000Z","comments":true,"path":"2017/02/20/xinqiyangfu-huo/","link":"","permalink":"http://yangxinqi.com/2017/02/20/xinqiyangfu-huo/","excerpt":"","text":"复活好久以来一直想复活下yangxinqi.com，今天终于买下来了，一看断断续续，从13年之后，来了日本之后就没在咋个写过Blog了，来日本确实是另外一番景象，快5年了，想找回曾经的那个自己，遂又开始写博，对于创业将近3年的老油条来讲，这一路走来的一幕幕，急需复盘，有时候走累了停一停，整理整理思路。好吧，给自己一个新的开始，复活, 把blog放到github上，github还是很靠谱的，在有生之年应该都还在吧这个判断应该是对的。分享出去，为了每篇文章的美观，后续我都会加上图片的：","categories":[{"name":"other","slug":"other","permalink":"http://yangxinqi.com/categories/other/"}],"tags":[]}]}